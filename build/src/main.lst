GAS LISTING /tmp/ccjQ4is3.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	main
   9              	main:
  10              	.LFB40:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** //
   2:src/main.cpp  **** // Created by os on 6/22/22.
   3:src/main.cpp  **** //
   4:src/main.cpp  **** #include "../lib/console.h"
   5:src/main.cpp  **** #include "../lib/hw.h"
   6:src/main.cpp  **** #include "../h/MemoryAllocator.hpp"
   7:src/main.cpp  **** #include "../h/Riscv.hpp"
   8:src/main.cpp  **** #include "../h/tcb.hpp"
   9:src/main.cpp  **** #include "../h/print.hpp"
  10:src/main.cpp  **** #include "../h/syscall_c.h"
  11:src/main.cpp  **** void userMain();
  12:src/main.cpp  **** uint64 backupSP;
  13:src/main.cpp  **** 
  14:src/main.cpp  **** void main(){
  12              		.loc 1 14 12
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  15:src/main.cpp  **** 
  16:src/main.cpp  ****     Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
  22              		.loc 1 16 5
  23              	.LVL0:
  24              	.LBB6:
  25              	.LBB7:
  26              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/22/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef OS_PROJECT_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define OS_PROJECT_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv
  11:src/../h/Riscv.hpp **** {
  12:src/../h/Riscv.hpp **** public:
  13:src/../h/Riscv.hpp ****     static void interruptRoutine();
  14:src/../h/Riscv.hpp ****     static void interruptHandler();
  15:src/../h/Riscv.hpp **** 
  16:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
GAS LISTING /tmp/ccjQ4is3.s 			page 2


  17:src/../h/Riscv.hpp ****     static void popSppSpie();
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp ****     // push x3..x31 registers onto stack
  20:src/../h/Riscv.hpp ****     static void pushRegisters();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp ****     // pop x3..x31 registers onto stack
  23:src/../h/Riscv.hpp ****     static void popRegisters();
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp ****     // read register scause
  26:src/../h/Riscv.hpp ****     static uint64 r_scause();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp ****     // write register scause
  29:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp ****     // read register sepc
  32:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp ****     // write register sepc
  35:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp ****     // read register stvec
  38:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  39:src/../h/Riscv.hpp **** 
  40:src/../h/Riscv.hpp ****     // write register stvec
  41:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp ****     // read register stval
  44:src/../h/Riscv.hpp ****     static uint64 r_stval();
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp ****     // write register stval
  47:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     enum BitMaskSip
  50:src/../h/Riscv.hpp ****     {
  51:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  52:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  53:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  54:src/../h/Riscv.hpp ****     };
  55:src/../h/Riscv.hpp **** 
  56:src/../h/Riscv.hpp ****     // mask set register sip
  57:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  58:src/../h/Riscv.hpp **** 
  59:src/../h/Riscv.hpp ****     // mask clear register sip
  60:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  61:src/../h/Riscv.hpp **** 
  62:src/../h/Riscv.hpp ****     // read register sip
  63:src/../h/Riscv.hpp ****     static uint64 r_sip();
  64:src/../h/Riscv.hpp **** 
  65:src/../h/Riscv.hpp ****     // write register sip
  66:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  69:src/../h/Riscv.hpp ****     {
  70:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  71:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  72:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  73:src/../h/Riscv.hpp ****     };
GAS LISTING /tmp/ccjQ4is3.s 			page 3


  74:src/../h/Riscv.hpp **** 
  75:src/../h/Riscv.hpp ****     // mask set register sstatus
  76:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp ****     // mask clear register sstatus
  79:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  80:src/../h/Riscv.hpp **** 
  81:src/../h/Riscv.hpp ****     // read register sstatus
  82:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  83:src/../h/Riscv.hpp **** 
  84:src/../h/Riscv.hpp ****     // write register sstatus
  85:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  86:src/../h/Riscv.hpp **** 
  87:src/../h/Riscv.hpp ****     // supervisor trap
  88:src/../h/Riscv.hpp ****     //static void supervisorTrap();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** private:
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp ****     // supervisor trap handler
  93:src/../h/Riscv.hpp ****     //static void handleSupervisorTrap();
  94:src/../h/Riscv.hpp **** 
  95:src/../h/Riscv.hpp **** };
  96:src/../h/Riscv.hpp **** 
  97:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  98:src/../h/Riscv.hpp **** {
  99:src/../h/Riscv.hpp ****     uint64 volatile scause;
 100:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 101:src/../h/Riscv.hpp ****     return scause;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 107:src/../h/Riscv.hpp **** }
 108:src/../h/Riscv.hpp **** 
 109:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 110:src/../h/Riscv.hpp **** {
 111:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 112:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 113:src/../h/Riscv.hpp ****     return sepc;
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 117:src/../h/Riscv.hpp **** {
 118:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 119:src/../h/Riscv.hpp **** }
 120:src/../h/Riscv.hpp **** 
 121:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 122:src/../h/Riscv.hpp **** {
 123:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 124:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 125:src/../h/Riscv.hpp ****     return stvec;
 126:src/../h/Riscv.hpp **** }
 127:src/../h/Riscv.hpp **** 
 128:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 129:src/../h/Riscv.hpp **** {
 130:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
GAS LISTING /tmp/ccjQ4is3.s 			page 4


 131:src/../h/Riscv.hpp **** }
 132:src/../h/Riscv.hpp **** 
 133:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 134:src/../h/Riscv.hpp **** {
 135:src/../h/Riscv.hpp ****     uint64 volatile stval;
 136:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 137:src/../h/Riscv.hpp ****     return stval;
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 141:src/../h/Riscv.hpp **** {
 142:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 143:src/../h/Riscv.hpp **** }
 144:src/../h/Riscv.hpp **** 
 145:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 146:src/../h/Riscv.hpp **** {
 147:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/Riscv.hpp **** }
 149:src/../h/Riscv.hpp **** 
 150:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 151:src/../h/Riscv.hpp **** {
 152:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 153:src/../h/Riscv.hpp **** }
 154:src/../h/Riscv.hpp **** 
 155:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 156:src/../h/Riscv.hpp **** {
 157:src/../h/Riscv.hpp ****     uint64 volatile sip;
 158:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 159:src/../h/Riscv.hpp ****     return sip;
 160:src/../h/Riscv.hpp **** }
 161:src/../h/Riscv.hpp **** 
 162:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 163:src/../h/Riscv.hpp **** {
 164:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 165:src/../h/Riscv.hpp **** }
 166:src/../h/Riscv.hpp **** 
 167:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 168:src/../h/Riscv.hpp **** {
 169:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
  27              		.loc 2 169 5
  28              		.loc 2 169 68 is_stmt 0
  29 0010 93070010 		li	a5,256
  30              	#APP
  31              	# 169 "src/../h/Riscv.hpp" 1
 170              	}
  32              		csrs sstatus, a5
  33              	# 0 "" 2
  34              	.LVL1:
  35              	#NO_APP
  36              	.LBE7:
  37              	.LBE6:
  17:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::interruptRoutine);
  38              		.loc 1 17 5 is_stmt 1
  39              		.loc 1 17 19 is_stmt 0
  40 0018 97070000 		la	a5,_ZN5Riscv16interruptRoutineEv
  40      83B70700 
  41              	.LVL2:
GAS LISTING /tmp/ccjQ4is3.s 			page 5


  42              	.LBB8:
  43              	.LBB9:
 130:src/../h/Riscv.hpp **** }
  44              		.loc 2 130 5 is_stmt 1
 130:src/../h/Riscv.hpp **** }
  45              		.loc 2 130 69 is_stmt 0
  46              	#APP
  47              	# 130 "src/../h/Riscv.hpp" 1
  48              		csrw stvec, a5
  49              	# 0 "" 2
  50              	.LVL3:
  51              	#NO_APP
  52              	.LBE9:
  53              	.LBE8:
  18:src/main.cpp  ****     MemoryAllocator::init();
  54              		.loc 1 18 5 is_stmt 1
  55              		.loc 1 18 26 is_stmt 0
  56 0024 97000000 		call	_ZN15MemoryAllocator4initEv@plt
  56      E7800000 
  57              	.LVL4:
  19:src/main.cpp  ****     thread_create(&CCB::running, nullptr, nullptr);
  58              		.loc 1 19 5 is_stmt 1
  59              		.loc 1 19 18 is_stmt 0
  60 002c 13060000 		li	a2,0
  61 0030 93050000 		li	a1,0
  62 0034 17050000 		la	a0,_ZN3CCB7runningE
  62      03350500 
  63 003c 97000000 		call	_Z13thread_createPP3CCBPFvPvES2_@plt
  63      E7800000 
  64              	.LVL5:
  20:src/main.cpp  ****     userMain();
  65              		.loc 1 20 5 is_stmt 1
  66              		.loc 1 20 13 is_stmt 0
  67 0044 97000000 		call	_Z8userMainv@plt
  67      E7800000 
  68              	.LVL6:
  21:src/main.cpp  **** }
  69              		.loc 1 21 1
  70 004c 83308100 		ld	ra,8(sp)
  71              		.cfi_restore 1
  72 0050 03340100 		ld	s0,0(sp)
  73              		.cfi_restore 8
  74              		.cfi_def_cfa 2, 16
  75 0054 13010101 		addi	sp,sp,16
  76              		.cfi_def_cfa_offset 0
  77 0058 67800000 		jr	ra
  78              		.cfi_endproc
  79              	.LFE40:
  81              		.globl	backupSP
  82              		.bss
  83              		.align	3
  86              	backupSP:
  87 0000 00000000 		.zero	8
  87      00000000 
  88              		.text
  89              	.Letext0:
  90              		.file 3 "src/../lib/hw.h"
GAS LISTING /tmp/ccjQ4is3.s 			page 6


  91              		.file 4 "src/../h/MemoryAllocator.hpp"
  92              		.file 5 "src/../h/syscall_c.h"
GAS LISTING /tmp/ccjQ4is3.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccjQ4is3.s:9      .text:0000000000000000 main
     /tmp/ccjQ4is3.s:13     .text:0000000000000000 .L0 
     /tmp/ccjQ4is3.s:14     .text:0000000000000000 .L0 
     /tmp/ccjQ4is3.s:15     .text:0000000000000004 .L0 
     /tmp/ccjQ4is3.s:18     .text:000000000000000c .L0 
     /tmp/ccjQ4is3.s:19     .text:000000000000000c .L0 
     /tmp/ccjQ4is3.s:21     .text:0000000000000010 .L0 
     /tmp/ccjQ4is3.s:27     .text:0000000000000010 .L0 
     /tmp/ccjQ4is3.s:28     .text:0000000000000010 .L0 
     /tmp/ccjQ4is3.s:29     .text:0000000000000010 .L0 
     /tmp/ccjQ4is3.s:39     .text:0000000000000018 .L0 
     /tmp/ccjQ4is3.s:40     .text:0000000000000018 .L0 
     /tmp/ccjQ4is3.s:45     .text:0000000000000020 .L0 
  src/../h/Riscv.hpp:130    .text:0000000000000020 .L0 
     /tmp/ccjQ4is3.s:55     .text:0000000000000024 .L0 
     /tmp/ccjQ4is3.s:56     .text:0000000000000024 .L0 
     /tmp/ccjQ4is3.s:59     .text:000000000000002c .L0 
     /tmp/ccjQ4is3.s:60     .text:000000000000002c .L0 
     /tmp/ccjQ4is3.s:66     .text:0000000000000044 .L0 
     /tmp/ccjQ4is3.s:67     .text:0000000000000044 .L0 
     /tmp/ccjQ4is3.s:70     .text:000000000000004c .L0 
     /tmp/ccjQ4is3.s:71     .text:0000000000000050 .L0 
     /tmp/ccjQ4is3.s:73     .text:0000000000000054 .L0 
     /tmp/ccjQ4is3.s:74     .text:0000000000000054 .L0 
     /tmp/ccjQ4is3.s:76     .text:0000000000000058 .L0 
     /tmp/ccjQ4is3.s:78     .text:000000000000005c .L0 
     /tmp/ccjQ4is3.s:86     .bss:0000000000000000 backupSP
     /tmp/ccjQ4is3.s:93     .text:000000000000005c .L0 
     /tmp/ccjQ4is3.s:40     .text:0000000000000018 .L0 
     /tmp/ccjQ4is3.s:62     .text:0000000000000034 .L0 
     /tmp/ccjQ4is3.s:662    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccjQ4is3.s:1409   .debug_str:00000000000004e4 .LASF87
     /tmp/ccjQ4is3.s:1343   .debug_str:00000000000002c4 .LASF88
     /tmp/ccjQ4is3.s:1277   .debug_str:00000000000000c6 .LASF89
     /tmp/ccjQ4is3.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccjQ4is3.s:89     .text:000000000000005c .Letext0
     /tmp/ccjQ4is3.s:1247   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccjQ4is3.s:1361   .debug_str:0000000000000355 .LASF0
     /tmp/ccjQ4is3.s:1369   .debug_str:0000000000000378 .LASF1
     /tmp/ccjQ4is3.s:1351   .debug_str:0000000000000306 .LASF2
     /tmp/ccjQ4is3.s:1337   .debug_str:00000000000002a5 .LASF4
     /tmp/ccjQ4is3.s:1395   .debug_str:0000000000000476 .LASF3
     /tmp/ccjQ4is3.s:1267   .debug_str:0000000000000083 .LASF5
     /tmp/ccjQ4is3.s:1373   .debug_str:00000000000003b9 .LASF6
     /tmp/ccjQ4is3.s:1359   .debug_str:0000000000000342 .LASF7
     /tmp/ccjQ4is3.s:1417   .debug_str:00000000000005c5 .LASF8
     /tmp/ccjQ4is3.s:1325   .debug_str:000000000000023e .LASF9
     /tmp/ccjQ4is3.s:1381   .debug_str:00000000000003e0 .LASF10
     /tmp/ccjQ4is3.s:1411   .debug_str:00000000000005a8 .LASF11
     /tmp/ccjQ4is3.s:1271   .debug_str:0000000000000096 .LASF12
     /tmp/ccjQ4is3.s:1253   .debug_str:0000000000000022 .LASF13
     /tmp/ccjQ4is3.s:1281   .debug_str:00000000000000ef .LASF14
     /tmp/ccjQ4is3.s:1391   .debug_str:0000000000000448 .LASF15
     /tmp/ccjQ4is3.s:1289   .debug_str:0000000000000124 .LASF16
     /tmp/ccjQ4is3.s:1273   .debug_str:00000000000000a6 .LASF90
GAS LISTING /tmp/ccjQ4is3.s 			page 8


     /tmp/ccjQ4is3.s:1403   .debug_str:00000000000004b1 .LASF17
     /tmp/ccjQ4is3.s:1429   .debug_str:0000000000000631 .LASF18
     /tmp/ccjQ4is3.s:1421   .debug_str:00000000000005f6 .LASF19
     /tmp/ccjQ4is3.s:1349   .debug_str:00000000000002f6 .LASF20
     /tmp/ccjQ4is3.s:1379   .debug_str:00000000000003d6 .LASF91
     /tmp/ccjQ4is3.s:1301   .debug_str:0000000000000198 .LASF22
     /tmp/ccjQ4is3.s:1375   .debug_str:00000000000003cc .LASF32
     /tmp/ccjQ4is3.s:1407   .debug_str:00000000000004c8 .LASF34
     /tmp/ccjQ4is3.s:1365   .debug_str:0000000000000369 .LASF21
     /tmp/ccjQ4is3.s:1297   .debug_str:0000000000000167 .LASF23
     /tmp/ccjQ4is3.s:1295   .debug_str:000000000000015d .LASF24
     /tmp/ccjQ4is3.s:1419   .debug_str:00000000000005d5 .LASF25
     /tmp/ccjQ4is3.s:1311   .debug_str:00000000000001f2 .LASF26
     /tmp/ccjQ4is3.s:1385   .debug_str:0000000000000402 .LASF27
     /tmp/ccjQ4is3.s:1263   .debug_str:000000000000006b .LASF74
     /tmp/ccjQ4is3.s:1371   .debug_str:000000000000038b .LASF76
     /tmp/ccjQ4is3.s:1367   .debug_str:0000000000000372 .LASF28
     /tmp/ccjQ4is3.s:1293   .debug_str:000000000000014e .LASF92
     /tmp/ccjQ4is3.s:1285   .debug_str:0000000000000104 .LASF29
     /tmp/ccjQ4is3.s:1345   .debug_str:00000000000002d1 .LASF30
     /tmp/ccjQ4is3.s:1269   .debug_str:000000000000008a .LASF31
     /tmp/ccjQ4is3.s:1333   .debug_str:000000000000027e .LASF33
     /tmp/ccjQ4is3.s:1389   .debug_str:000000000000042a .LASF35
     /tmp/ccjQ4is3.s:1299   .debug_str:0000000000000187 .LASF36
     /tmp/ccjQ4is3.s:1355   .debug_str:000000000000031e .LASF37
     /tmp/ccjQ4is3.s:1387   .debug_str:000000000000041f .LASF38
     /tmp/ccjQ4is3.s:1425   .debug_str:000000000000060e .LASF39
     /tmp/ccjQ4is3.s:1265   .debug_str:0000000000000075 .LASF40
     /tmp/ccjQ4is3.s:1307   .debug_str:00000000000001cf .LASF41
     /tmp/ccjQ4is3.s:1401   .debug_str:00000000000004a4 .LASF42
     /tmp/ccjQ4is3.s:1251   .debug_str:0000000000000008 .LASF43
     /tmp/ccjQ4is3.s:1255   .debug_str:0000000000000032 .LASF44
     /tmp/ccjQ4is3.s:1399   .debug_str:000000000000048f .LASF46
     /tmp/ccjQ4is3.s:1305   .debug_str:00000000000001c6 .LASF48
     /tmp/ccjQ4is3.s:1303   .debug_str:00000000000001b1 .LASF50
     /tmp/ccjQ4is3.s:1397   .debug_str:0000000000000488 .LASF45
     /tmp/ccjQ4is3.s:1383   .debug_str:00000000000003ef .LASF47
     /tmp/ccjQ4is3.s:1413   .debug_str:00000000000005b7 .LASF49
     /tmp/ccjQ4is3.s:1323   .debug_str:000000000000022b .LASF51
     /tmp/ccjQ4is3.s:1317   .debug_str:000000000000020f .LASF52
     /tmp/ccjQ4is3.s:1291   .debug_str:000000000000013a .LASF53
     /tmp/ccjQ4is3.s:1249   .debug_str:0000000000000000 .LASF54
     /tmp/ccjQ4is3.s:1329   .debug_str:0000000000000262 .LASF55
     /tmp/ccjQ4is3.s:1309   .debug_str:00000000000001ea .LASF56
     /tmp/ccjQ4is3.s:1275   .debug_str:00000000000000b2 .LASF57
     /tmp/ccjQ4is3.s:1331   .debug_str:0000000000000276 .LASF58
     /tmp/ccjQ4is3.s:1287   .debug_str:0000000000000110 .LASF59
     /tmp/ccjQ4is3.s:1363   .debug_str:0000000000000362 .LASF60
     /tmp/ccjQ4is3.s:1423   .debug_str:00000000000005fb .LASF61
     /tmp/ccjQ4is3.s:1415   .debug_str:00000000000005be .LASF62
     /tmp/ccjQ4is3.s:1315   .debug_str:00000000000001fc .LASF63
     /tmp/ccjQ4is3.s:1321   .debug_str:0000000000000225 .LASF64
     /tmp/ccjQ4is3.s:1405   .debug_str:00000000000004b6 .LASF65
     /tmp/ccjQ4is3.s:1261   .debug_str:0000000000000065 .LASF66
     /tmp/ccjQ4is3.s:1433   .debug_str:000000000000063b .LASF67
     /tmp/ccjQ4is3.s:1427   .debug_str:0000000000000626 .LASF68
     /tmp/ccjQ4is3.s:1393   .debug_str:000000000000045e .LASF69
GAS LISTING /tmp/ccjQ4is3.s 			page 9


     /tmp/ccjQ4is3.s:1339   .debug_str:00000000000002ac .LASF70
     /tmp/ccjQ4is3.s:1347   .debug_str:00000000000002de .LASF71
     /tmp/ccjQ4is3.s:1279   .debug_str:00000000000000e5 .LASF72
     /tmp/ccjQ4is3.s:1335   .debug_str:000000000000028f .LASF73
     /tmp/ccjQ4is3.s:1353   .debug_str:0000000000000314 .LASF75
     /tmp/ccjQ4is3.s:1327   .debug_str:000000000000024c .LASF77
     /tmp/ccjQ4is3.s:1313   .debug_str:00000000000001f7 .LASF78
     /tmp/ccjQ4is3.s:1283   .debug_str:00000000000000fb .LASF79
     /tmp/ccjQ4is3.s:1377   .debug_str:00000000000003d1 .LASF80
     /tmp/ccjQ4is3.s:10     .text:0000000000000000 .LFB40
     /tmp/ccjQ4is3.s:79     .text:000000000000005c .LFE40
     /tmp/ccjQ4is3.s:24     .text:0000000000000010 .LBB6
     /tmp/ccjQ4is3.s:37     .text:0000000000000018 .LBE6
     /tmp/ccjQ4is3.s:1225   .debug_loc:0000000000000000 .LLST0
     /tmp/ccjQ4is3.s:42     .text:0000000000000020 .LBB8
     /tmp/ccjQ4is3.s:53     .text:0000000000000024 .LBE8
     /tmp/ccjQ4is3.s:57     .text:000000000000002c .LVL4
     /tmp/ccjQ4is3.s:64     .text:0000000000000044 .LVL5
     /tmp/ccjQ4is3.s:68     .text:000000000000004c .LVL6
     /tmp/ccjQ4is3.s:1431   .debug_str:0000000000000636 .LASF81
     /tmp/ccjQ4is3.s:1357   .debug_str:000000000000033c .LASF82
     /tmp/ccjQ4is3.s:1257   .debug_str:000000000000003b .LASF83
     /tmp/ccjQ4is3.s:1319   .debug_str:0000000000000217 .LASF85
     /tmp/ccjQ4is3.s:1341   .debug_str:00000000000002b7 .LASF84
     /tmp/ccjQ4is3.s:1259   .debug_str:000000000000005c .LASF86
     /tmp/ccjQ4is3.s:23     .text:0000000000000010 .LVL0
     /tmp/ccjQ4is3.s:34     .text:0000000000000018 .LVL1
     /tmp/ccjQ4is3.s:94     .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN5Riscv16interruptRoutineEv
_ZN15MemoryAllocator4initEv
_ZN3CCB7runningE
_Z13thread_createPP3CCBPFvPvES2_
_Z8userMainv
