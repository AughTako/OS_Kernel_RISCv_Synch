GAS LISTING /tmp/ccjndBd4.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.section	.rodata.str1.8,"aMS",@progbits,1
   7              		.align	3
   8              	.LC0:
   9 0000 56726163 		.string	"Vraceno\n"
   9      656E6F0A 
   9      00
  10              		.text
  11              		.align	2
  12              		.globl	main
  14              	main:
  15              	.LFB46:
  16              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** //
   2:src/main.cpp  **** // Created by os on 6/22/22.
   3:src/main.cpp  **** //
   4:src/main.cpp  **** #include "../lib/console.h"
   5:src/main.cpp  **** #include "../lib/hw.h"
   6:src/main.cpp  **** #include "../h/MemoryAllocator.hpp"
   7:src/main.cpp  **** #include "../h/Riscv.hpp"
   8:src/main.cpp  **** #include "../h/tcb.hpp"
   9:src/main.cpp  **** #include "../h/printing.hpp"
  10:src/main.cpp  **** #include "../h/syscall_c.h"
  11:src/main.cpp  **** void userMain();
  12:src/main.cpp  **** uint64 backupSP;
  13:src/main.cpp  **** 
  14:src/main.cpp  **** void main(){
  17              		.loc 1 14 12
  18              		.cfi_startproc
  19 0000 130101FF 		addi	sp,sp,-16
  20              		.cfi_def_cfa_offset 16
  21 0004 23341100 		sd	ra,8(sp)
  22 0008 23308100 		sd	s0,0(sp)
  23              		.cfi_offset 1, -8
  24              		.cfi_offset 8, -16
  25 000c 13040101 		addi	s0,sp,16
  26              		.cfi_def_cfa 8, 0
  15:src/main.cpp  **** 
  16:src/main.cpp  ****     //Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
  17:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::interruptRoutine);
  27              		.loc 1 17 5
  28              		.loc 1 17 19 is_stmt 0
  29 0010 97070000 		la	a5,_ZN5Riscv16interruptRoutineEv
  29      83B70700 
  30              	.LVL0:
  31              	.LBB4:
  32              	.LBB5:
  33              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/22/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef OS_PROJECT_RISCV_HPP
GAS LISTING /tmp/ccjndBd4.s 			page 2


   6:src/../h/Riscv.hpp **** #define OS_PROJECT_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv
  11:src/../h/Riscv.hpp **** {
  12:src/../h/Riscv.hpp **** public:
  13:src/../h/Riscv.hpp ****     static void interruptRoutine();
  14:src/../h/Riscv.hpp ****     static void interruptHandler();
  15:src/../h/Riscv.hpp **** 
  16:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  17:src/../h/Riscv.hpp ****     static void popSppSpie();
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp ****     // push x3..x31 registers onto stack
  20:src/../h/Riscv.hpp ****     static void pushRegisters();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp ****     // pop x3..x31 registers onto stack
  23:src/../h/Riscv.hpp ****     static void popRegisters();
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp ****     // read register scause
  26:src/../h/Riscv.hpp ****     static uint64 r_scause();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp ****     // write register scause
  29:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp ****     // read register sepc
  32:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp ****     // write register sepc
  35:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp ****     // read register stvec
  38:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  39:src/../h/Riscv.hpp **** 
  40:src/../h/Riscv.hpp ****     // write register stvec
  41:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp ****     // read register stval
  44:src/../h/Riscv.hpp ****     static uint64 r_stval();
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp ****     // write register stval
  47:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     enum BitMaskSip
  50:src/../h/Riscv.hpp ****     {
  51:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  52:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  53:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  54:src/../h/Riscv.hpp ****     };
  55:src/../h/Riscv.hpp **** 
  56:src/../h/Riscv.hpp ****     // mask set register sip
  57:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  58:src/../h/Riscv.hpp **** 
  59:src/../h/Riscv.hpp ****     // mask clear register sip
  60:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  61:src/../h/Riscv.hpp **** 
  62:src/../h/Riscv.hpp ****     // read register sip
GAS LISTING /tmp/ccjndBd4.s 			page 3


  63:src/../h/Riscv.hpp ****     static uint64 r_sip();
  64:src/../h/Riscv.hpp **** 
  65:src/../h/Riscv.hpp ****     // write register sip
  66:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  69:src/../h/Riscv.hpp ****     {
  70:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  71:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  72:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  73:src/../h/Riscv.hpp ****     };
  74:src/../h/Riscv.hpp **** 
  75:src/../h/Riscv.hpp ****     // mask set register sstatus
  76:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp ****     // mask clear register sstatus
  79:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  80:src/../h/Riscv.hpp **** 
  81:src/../h/Riscv.hpp ****     // read register sstatus
  82:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  83:src/../h/Riscv.hpp **** 
  84:src/../h/Riscv.hpp ****     // write register sstatus
  85:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  86:src/../h/Riscv.hpp **** 
  87:src/../h/Riscv.hpp ****     // supervisor trap
  88:src/../h/Riscv.hpp ****     //static void supervisorTrap();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** private:
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp ****     // supervisor trap handler
  93:src/../h/Riscv.hpp ****     //static void handleSupervisorTrap();
  94:src/../h/Riscv.hpp **** 
  95:src/../h/Riscv.hpp **** };
  96:src/../h/Riscv.hpp **** 
  97:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  98:src/../h/Riscv.hpp **** {
  99:src/../h/Riscv.hpp ****     uint64 volatile scause;
 100:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 101:src/../h/Riscv.hpp ****     return scause;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 107:src/../h/Riscv.hpp **** }
 108:src/../h/Riscv.hpp **** 
 109:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 110:src/../h/Riscv.hpp **** {
 111:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 112:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 113:src/../h/Riscv.hpp ****     return sepc;
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 117:src/../h/Riscv.hpp **** {
 118:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 119:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/ccjndBd4.s 			page 4


 120:src/../h/Riscv.hpp **** 
 121:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 122:src/../h/Riscv.hpp **** {
 123:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 124:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 125:src/../h/Riscv.hpp ****     return stvec;
 126:src/../h/Riscv.hpp **** }
 127:src/../h/Riscv.hpp **** 
 128:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 129:src/../h/Riscv.hpp **** {
 130:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
  34              		.loc 2 130 5 is_stmt 1
  35              		.loc 2 130 69 is_stmt 0
  36              	#APP
  37              	# 130 "src/../h/Riscv.hpp" 1
 131              	}
  38              		csrw stvec, a5
  39              	# 0 "" 2
  40              	.LVL1:
  41              	#NO_APP
  42              	.LBE5:
  43              	.LBE4:
  18:src/main.cpp  ****     thread_create(&CCB::running, nullptr, nullptr);
  44              		.loc 1 18 5 is_stmt 1
  45              		.loc 1 18 18 is_stmt 0
  46 001c 13060000 		li	a2,0
  47 0020 93050000 		li	a1,0
  48 0024 17050000 		la	a0,_ZN3CCB7runningE
  48      03350500 
  49 002c 97000000 		call	_Z13thread_createPP3CCBPFvPvES2_@plt
  49      E7800000 
  50              	.LVL2:
  19:src/main.cpp  ****     userMain();
  51              		.loc 1 19 5 is_stmt 1
  52              		.loc 1 19 13 is_stmt 0
  53 0034 97000000 		call	_Z8userMainv@plt
  53      E7800000 
  54              	.LVL3:
  20:src/main.cpp  ****     printString("Vraceno\n");
  55              		.loc 1 20 5 is_stmt 1
  56              		.loc 1 20 16 is_stmt 0
  57 003c 17050000 		lla	a0,.LC0
  57      13050500 
  58 0044 97000000 		call	_Z11printStringPKc@plt
  58      E7800000 
  59              	.LVL4:
  21:src/main.cpp  **** }
  60              		.loc 1 21 1
  61 004c 83308100 		ld	ra,8(sp)
  62              		.cfi_restore 1
  63 0050 03340100 		ld	s0,0(sp)
  64              		.cfi_restore 8
  65              		.cfi_def_cfa 2, 16
  66 0054 13010101 		addi	sp,sp,16
  67              		.cfi_def_cfa_offset 0
  68 0058 67800000 		jr	ra
  69              		.cfi_endproc
GAS LISTING /tmp/ccjndBd4.s 			page 5


  70              	.LFE46:
  72              		.globl	backupSP
  73              		.bss
  74              		.align	3
  77              	backupSP:
  78 0000 00000000 		.zero	8
  78      00000000 
  79              		.text
  80              	.Letext0:
  81              		.file 3 "src/../lib/hw.h"
  82              		.file 4 "src/../h/syscall_c.h"
  83              		.file 5 "src/../h/printing.hpp"
GAS LISTING /tmp/ccjndBd4.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccjndBd4.s:14     .text:0000000000000000 main
     /tmp/ccjndBd4.s:18     .text:0000000000000000 .L0 
     /tmp/ccjndBd4.s:19     .text:0000000000000000 .L0 
     /tmp/ccjndBd4.s:20     .text:0000000000000004 .L0 
     /tmp/ccjndBd4.s:23     .text:000000000000000c .L0 
     /tmp/ccjndBd4.s:24     .text:000000000000000c .L0 
     /tmp/ccjndBd4.s:26     .text:0000000000000010 .L0 
     /tmp/ccjndBd4.s:28     .text:0000000000000010 .L0 
     /tmp/ccjndBd4.s:29     .text:0000000000000010 .L0 
     /tmp/ccjndBd4.s:35     .text:0000000000000018 .L0 
  src/../h/Riscv.hpp:130    .text:0000000000000018 .L0 
     /tmp/ccjndBd4.s:45     .text:000000000000001c .L0 
     /tmp/ccjndBd4.s:46     .text:000000000000001c .L0 
     /tmp/ccjndBd4.s:52     .text:0000000000000034 .L0 
     /tmp/ccjndBd4.s:53     .text:0000000000000034 .L0 
     /tmp/ccjndBd4.s:56     .text:000000000000003c .L0 
     /tmp/ccjndBd4.s:57     .text:000000000000003c .L0 
     /tmp/ccjndBd4.s:61     .text:000000000000004c .L0 
     /tmp/ccjndBd4.s:62     .text:0000000000000050 .L0 
     /tmp/ccjndBd4.s:64     .text:0000000000000054 .L0 
     /tmp/ccjndBd4.s:65     .text:0000000000000054 .L0 
     /tmp/ccjndBd4.s:67     .text:0000000000000058 .L0 
     /tmp/ccjndBd4.s:69     .text:000000000000005c .L0 
     /tmp/ccjndBd4.s:77     .bss:0000000000000000 backupSP
     /tmp/ccjndBd4.s:84     .text:000000000000005c .L0 
     /tmp/ccjndBd4.s:29     .text:0000000000000010 .L0 
     /tmp/ccjndBd4.s:48     .text:0000000000000024 .L0 
     /tmp/ccjndBd4.s:8      .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccjndBd4.s:57     .text:000000000000003c .L0 
     /tmp/ccjndBd4.s:515    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccjndBd4.s:1078   .debug_str:00000000000003f4 .LASF65
     /tmp/ccjndBd4.s:1024   .debug_str:000000000000022b .LASF66
     /tmp/ccjndBd4.s:1040   .debug_str:00000000000002ad .LASF67
     /tmp/ccjndBd4.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccjndBd4.s:80     .text:000000000000005c .Letext0
     /tmp/ccjndBd4.s:946    .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccjndBd4.s:1036   .debug_str:0000000000000299 .LASF0
     /tmp/ccjndBd4.s:1044   .debug_str:00000000000002e3 .LASF1
     /tmp/ccjndBd4.s:1028   .debug_str:0000000000000250 .LASF2
     /tmp/ccjndBd4.s:1016   .debug_str:0000000000000200 .LASF4
     /tmp/ccjndBd4.s:1064   .debug_str:000000000000038d .LASF3
     /tmp/ccjndBd4.s:966    .debug_str:0000000000000080 .LASF5
     /tmp/ccjndBd4.s:1046   .debug_str:00000000000002f6 .LASF6
     /tmp/ccjndBd4.s:1034   .debug_str:0000000000000286 .LASF7
     /tmp/ccjndBd4.s:1082   .debug_str:00000000000004c7 .LASF8
     /tmp/ccjndBd4.s:1006   .debug_str:00000000000001a1 .LASF9
     /tmp/ccjndBd4.s:1054   .debug_str:0000000000000332 .LASF10
     /tmp/ccjndBd4.s:1080   .debug_str:00000000000004b8 .LASF11
     /tmp/ccjndBd4.s:968    .debug_str:0000000000000087 .LASF12
     /tmp/ccjndBd4.s:952    .debug_str:0000000000000022 .LASF13
     /tmp/ccjndBd4.s:974    .debug_str:00000000000000b5 .LASF14
     /tmp/ccjndBd4.s:1060   .debug_str:000000000000035f .LASF15
     /tmp/ccjndBd4.s:978    .debug_str:00000000000000ca .LASF16
     /tmp/ccjndBd4.s:998    .debug_str:000000000000017b .LASF17
     /tmp/ccjndBd4.s:1042   .debug_str:00000000000002dd .LASF68
GAS LISTING /tmp/ccjndBd4.s 			page 7


     /tmp/ccjndBd4.s:1012   .debug_str:00000000000001d9 .LASF18
     /tmp/ccjndBd4.s:1052   .debug_str:0000000000000314 .LASF20
     /tmp/ccjndBd4.s:986    .debug_str:0000000000000115 .LASF19
     /tmp/ccjndBd4.s:1032   .debug_str:0000000000000268 .LASF21
     /tmp/ccjndBd4.s:1058   .debug_str:0000000000000354 .LASF22
     /tmp/ccjndBd4.s:1086   .debug_str:00000000000004ea .LASF23
     /tmp/ccjndBd4.s:964    .debug_str:0000000000000072 .LASF24
     /tmp/ccjndBd4.s:992    .debug_str:0000000000000144 .LASF25
     /tmp/ccjndBd4.s:1070   .debug_str:00000000000003bb .LASF26
     /tmp/ccjndBd4.s:950    .debug_str:0000000000000008 .LASF27
     /tmp/ccjndBd4.s:954    .debug_str:0000000000000032 .LASF28
     /tmp/ccjndBd4.s:1068   .debug_str:00000000000003a6 .LASF30
     /tmp/ccjndBd4.s:990    .debug_str:000000000000013b .LASF32
     /tmp/ccjndBd4.s:988    .debug_str:0000000000000126 .LASF34
     /tmp/ccjndBd4.s:1066   .debug_str:000000000000039f .LASF29
     /tmp/ccjndBd4.s:1056   .debug_str:0000000000000341 .LASF31
     /tmp/ccjndBd4.s:1076   .debug_str:00000000000003ed .LASF33
     /tmp/ccjndBd4.s:1072   .debug_str:00000000000003c8 .LASF35
     /tmp/ccjndBd4.s:1002   .debug_str:0000000000000193 .LASF36
     /tmp/ccjndBd4.s:980    .debug_str:00000000000000e0 .LASF37
     /tmp/ccjndBd4.s:948    .debug_str:0000000000000000 .LASF38
     /tmp/ccjndBd4.s:1010   .debug_str:00000000000001c5 .LASF39
     /tmp/ccjndBd4.s:994    .debug_str:000000000000015f .LASF40
     /tmp/ccjndBd4.s:970    .debug_str:0000000000000097 .LASF41
     /tmp/ccjndBd4.s:1090   .debug_str:000000000000050d .LASF42
     /tmp/ccjndBd4.s:996    .debug_str:0000000000000167 .LASF43
     /tmp/ccjndBd4.s:1038   .debug_str:00000000000002a6 .LASF44
     /tmp/ccjndBd4.s:1084   .debug_str:00000000000004d7 .LASF45
     /tmp/ccjndBd4.s:962    .debug_str:000000000000006b .LASF46
     /tmp/ccjndBd4.s:1000   .debug_str:0000000000000180 .LASF47
     /tmp/ccjndBd4.s:1004   .debug_str:000000000000019b .LASF48
     /tmp/ccjndBd4.s:1074   .debug_str:00000000000003db .LASF49
     /tmp/ccjndBd4.s:960    .debug_str:0000000000000065 .LASF50
     /tmp/ccjndBd4.s:1092   .debug_str:0000000000000515 .LASF51
     /tmp/ccjndBd4.s:1088   .debug_str:0000000000000502 .LASF52
     /tmp/ccjndBd4.s:1062   .debug_str:0000000000000375 .LASF53
     /tmp/ccjndBd4.s:1018   .debug_str:0000000000000207 .LASF54
     /tmp/ccjndBd4.s:1026   .debug_str:0000000000000238 .LASF55
     /tmp/ccjndBd4.s:972    .debug_str:00000000000000ab .LASF56
     /tmp/ccjndBd4.s:1014   .debug_str:00000000000001ea .LASF57
     /tmp/ccjndBd4.s:1030   .debug_str:000000000000025e .LASF69
     /tmp/ccjndBd4.s:1008   .debug_str:00000000000001af .LASF70
     /tmp/ccjndBd4.s:976    .debug_str:00000000000000c1 .LASF58
     /tmp/ccjndBd4.s:1050   .debug_str:000000000000030f .LASF71
     /tmp/ccjndBd4.s:15     .text:0000000000000000 .LFB46
     /tmp/ccjndBd4.s:70     .text:000000000000005c .LFE46
     /tmp/ccjndBd4.s:31     .text:0000000000000018 .LBB4
     /tmp/ccjndBd4.s:43     .text:000000000000001c .LBE4
     /tmp/ccjndBd4.s:50     .text:0000000000000034 .LVL2
     /tmp/ccjndBd4.s:54     .text:000000000000003c .LVL3
     /tmp/ccjndBd4.s:59     .text:000000000000004c .LVL4
     /tmp/ccjndBd4.s:1048   .debug_str:0000000000000309 .LASF72
     /tmp/ccjndBd4.s:956    .debug_str:000000000000003b .LASF59
     /tmp/ccjndBd4.s:982    .debug_str:00000000000000f4 .LASF61
     /tmp/ccjndBd4.s:1022   .debug_str:000000000000021e .LASF60
     /tmp/ccjndBd4.s:958    .debug_str:000000000000005c .LASF62
     /tmp/ccjndBd4.s:984    .debug_str:0000000000000102 .LASF63
GAS LISTING /tmp/ccjndBd4.s 			page 8


     /tmp/ccjndBd4.s:1020   .debug_str:0000000000000212 .LASF64
     /tmp/ccjndBd4.s:85     .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_ZN5Riscv16interruptRoutineEv
_ZN3CCB7runningE
_Z13thread_createPP3CCBPFvPvES2_
_Z8userMainv
_Z11printStringPKc
