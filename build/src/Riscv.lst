GAS LISTING /tmp/cce5b6OA.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB38:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   2:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   3:src/Riscv.cpp **** #include "../h/ccb.hpp"
   4:src/Riscv.cpp **** #include "../h/print.hpp"
   5:src/Riscv.cpp **** #include "../lib/console.h"
   6:src/Riscv.cpp **** #include "../h/ccb.hpp"
   7:src/Riscv.cpp **** 
   8:src/Riscv.cpp **** #define ECALL_USER 0x0000000000000008UL
   9:src/Riscv.cpp **** #define ECALL_SUPERVISOR 0x0000000000000009UL
  10:src/Riscv.cpp **** #define INTR_TIMER 0x8000000000000001UL
  11:src/Riscv.cpp **** 
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp **** #define MEM_ALLOC 0x01
  14:src/Riscv.cpp **** #define MEM_FREE 0x02
  15:src/Riscv.cpp **** #define THREAD_CREATE 0x11
  16:src/Riscv.cpp **** #define THREAD_EXIT 0x12
  17:src/Riscv.cpp **** #define THREAD_DISPATCH 0x13
  18:src/Riscv.cpp **** extern uint64 backupSP;
  19:src/Riscv.cpp **** 
  20:src/Riscv.cpp **** 
  21:src/Riscv.cpp **** void Riscv::popSppSpie()
  22:src/Riscv.cpp **** {
  12              		.loc 1 22 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  23:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 23 5
  21              		.loc 1 23 39 is_stmt 0
  22              	#APP
  23              	# 23 "src/Riscv.cpp" 1
  24              	    __asm__ volatile ("csrc sip, 0x02");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 24 5 is_stmt 1
  27              		.loc 1 24 40 is_stmt 0
  28              	# 24 "src/Riscv.cpp" 1
  25              	    ms_sstatus(SSTATUS_SPP);
  29              		csrc sip, 0x02
  30              	# 0 "" 2
  31              		.loc 1 25 5 is_stmt 1
  32              	.LVL0:
  33              	#NO_APP
GAS LISTING /tmp/cce5b6OA.s 			page 2


  34              	.LBB45:
  35              	.LBB46:
  36              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/22/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef OS_PROJECT_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define OS_PROJECT_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv
  11:src/../h/Riscv.hpp **** {
  12:src/../h/Riscv.hpp **** public:
  13:src/../h/Riscv.hpp ****     static void interruptRoutine();
  14:src/../h/Riscv.hpp ****     static void interruptHandler();
  15:src/../h/Riscv.hpp **** 
  16:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  17:src/../h/Riscv.hpp ****     static void popSppSpie();
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp ****     // push x3..x31 registers onto stack
  20:src/../h/Riscv.hpp ****     static void pushRegisters();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp ****     // pop x3..x31 registers onto stack
  23:src/../h/Riscv.hpp ****     static void popRegisters();
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp ****     // read register scause
  26:src/../h/Riscv.hpp ****     static uint64 r_scause();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp ****     // write register scause
  29:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp ****     // read register sepc
  32:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp ****     // write register sepc
  35:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp ****     // read register stvec
  38:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  39:src/../h/Riscv.hpp **** 
  40:src/../h/Riscv.hpp ****     // write register stvec
  41:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp ****     // read register stval
  44:src/../h/Riscv.hpp ****     static uint64 r_stval();
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp ****     // write register stval
  47:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     enum BitMaskSip
  50:src/../h/Riscv.hpp ****     {
  51:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  52:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  53:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  54:src/../h/Riscv.hpp ****     };
GAS LISTING /tmp/cce5b6OA.s 			page 3


  55:src/../h/Riscv.hpp **** 
  56:src/../h/Riscv.hpp ****     // mask set register sip
  57:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  58:src/../h/Riscv.hpp **** 
  59:src/../h/Riscv.hpp ****     // mask clear register sip
  60:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  61:src/../h/Riscv.hpp **** 
  62:src/../h/Riscv.hpp ****     // read register sip
  63:src/../h/Riscv.hpp ****     static uint64 r_sip();
  64:src/../h/Riscv.hpp **** 
  65:src/../h/Riscv.hpp ****     // write register sip
  66:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  69:src/../h/Riscv.hpp ****     {
  70:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  71:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  72:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  73:src/../h/Riscv.hpp ****     };
  74:src/../h/Riscv.hpp **** 
  75:src/../h/Riscv.hpp ****     // mask set register sstatus
  76:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp ****     // mask clear register sstatus
  79:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  80:src/../h/Riscv.hpp **** 
  81:src/../h/Riscv.hpp ****     // read register sstatus
  82:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  83:src/../h/Riscv.hpp **** 
  84:src/../h/Riscv.hpp ****     // write register sstatus
  85:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  86:src/../h/Riscv.hpp **** 
  87:src/../h/Riscv.hpp ****     // supervisor trap
  88:src/../h/Riscv.hpp ****     //static void supervisorTrap();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** private:
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp ****     // supervisor trap handler
  93:src/../h/Riscv.hpp ****     //static void handleSupervisorTrap();
  94:src/../h/Riscv.hpp **** 
  95:src/../h/Riscv.hpp **** };
  96:src/../h/Riscv.hpp **** 
  97:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  98:src/../h/Riscv.hpp **** {
  99:src/../h/Riscv.hpp ****     uint64 volatile scause;
 100:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 101:src/../h/Riscv.hpp ****     return scause;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 107:src/../h/Riscv.hpp **** }
 108:src/../h/Riscv.hpp **** 
 109:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 110:src/../h/Riscv.hpp **** {
 111:src/../h/Riscv.hpp ****     uint64 volatile sepc;
GAS LISTING /tmp/cce5b6OA.s 			page 4


 112:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 113:src/../h/Riscv.hpp ****     return sepc;
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 117:src/../h/Riscv.hpp **** {
 118:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 119:src/../h/Riscv.hpp **** }
 120:src/../h/Riscv.hpp **** 
 121:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 122:src/../h/Riscv.hpp **** {
 123:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 124:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 125:src/../h/Riscv.hpp ****     return stvec;
 126:src/../h/Riscv.hpp **** }
 127:src/../h/Riscv.hpp **** 
 128:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 129:src/../h/Riscv.hpp **** {
 130:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 131:src/../h/Riscv.hpp **** }
 132:src/../h/Riscv.hpp **** 
 133:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 134:src/../h/Riscv.hpp **** {
 135:src/../h/Riscv.hpp ****     uint64 volatile stval;
 136:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 137:src/../h/Riscv.hpp ****     return stval;
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 141:src/../h/Riscv.hpp **** {
 142:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 143:src/../h/Riscv.hpp **** }
 144:src/../h/Riscv.hpp **** 
 145:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 146:src/../h/Riscv.hpp **** {
 147:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/Riscv.hpp **** }
 149:src/../h/Riscv.hpp **** 
 150:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 151:src/../h/Riscv.hpp **** {
 152:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 153:src/../h/Riscv.hpp **** }
 154:src/../h/Riscv.hpp **** 
 155:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 156:src/../h/Riscv.hpp **** {
 157:src/../h/Riscv.hpp ****     uint64 volatile sip;
 158:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 159:src/../h/Riscv.hpp ****     return sip;
 160:src/../h/Riscv.hpp **** }
 161:src/../h/Riscv.hpp **** 
 162:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 163:src/../h/Riscv.hpp **** {
 164:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 165:src/../h/Riscv.hpp **** }
 166:src/../h/Riscv.hpp **** 
 167:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 168:src/../h/Riscv.hpp **** {
GAS LISTING /tmp/cce5b6OA.s 			page 5


 169:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
  37              		.loc 2 169 5
  38              		.loc 2 169 68 is_stmt 0
  39 0014 93070010 		li	a5,256
  40              	#APP
  41              	# 169 "src/../h/Riscv.hpp" 1
 170              	}
  42              		csrs sstatus, a5
  43              	# 0 "" 2
  44              	.LVL1:
  45              	#NO_APP
  46              	.LBE46:
  47              	.LBE45:
  26:src/Riscv.cpp ****     __asm__ volatile ("sret");
  48              		.loc 1 26 5 is_stmt 1
  49              		.loc 1 26 30 is_stmt 0
  50              	#APP
  51              	# 26 "src/Riscv.cpp" 1
  27              	}
  52              		sret
  53              	# 0 "" 2
  54              		.loc 1 27 1
  55              	#NO_APP
  56 0020 03348100 		ld	s0,8(sp)
  57              		.cfi_restore 8
  58              		.cfi_def_cfa 2, 16
  59 0024 13010101 		addi	sp,sp,16
  60              		.cfi_def_cfa_offset 0
  61 0028 67800000 		jr	ra
  62              		.cfi_endproc
  63              	.LFE38:
  65              		.section	.rodata.str1.8,"aMS",@progbits,1
  66              		.align	3
  67              	.LC0:
  68 0000 4572726F 		.string	"Error "
  68      722000
  69 0007 00       		.align	3
  70              	.LC1:
  71 0008 0A00     		.string	"\n"
  72              		.text
  73              		.align	2
  74              		.globl	_ZN5Riscv16interruptHandlerEv
  76              	_ZN5Riscv16interruptHandlerEv:
  77              	.LFB39:
  28:src/Riscv.cpp **** 
  29:src/Riscv.cpp **** void Riscv::interruptHandler() {
  78              		.loc 1 29 32 is_stmt 1
  79              		.cfi_startproc
  80 002c 130101FA 		addi	sp,sp,-96
  81              		.cfi_def_cfa_offset 96
  82 0030 233C1104 		sd	ra,88(sp)
  83 0034 23388104 		sd	s0,80(sp)
  84 0038 23349104 		sd	s1,72(sp)
  85 003c 23302105 		sd	s2,64(sp)
  86              		.cfi_offset 1, -8
  87              		.cfi_offset 8, -16
  88              		.cfi_offset 9, -24
GAS LISTING /tmp/cce5b6OA.s 			page 6


  89              		.cfi_offset 18, -32
  90 0040 13040106 		addi	s0,sp,96
  91              		.cfi_def_cfa 8, 0
  30:src/Riscv.cpp ****     uint64 scause = Riscv::r_scause();
  92              		.loc 1 30 5
  93              	.LBB47:
  94              	.LBB48:
  99:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  95              		.loc 2 99 5
 100:src/../h/Riscv.hpp ****     return scause;
  96              		.loc 2 100 5
 100:src/../h/Riscv.hpp ****     return scause;
  97              		.loc 2 100 72 is_stmt 0
  98              	#APP
  99              	# 100 "src/../h/Riscv.hpp" 1
 100              		csrr a5, scause
 101              	# 0 "" 2
 102              	#NO_APP
 103 0048 2330F4FA 		sd	a5,-96(s0)
 101:src/../h/Riscv.hpp **** }
 104              		.loc 2 101 5 is_stmt 1
 101:src/../h/Riscv.hpp **** }
 105              		.loc 2 101 12 is_stmt 0
 106 004c 033704FA 		ld	a4,-96(s0)
 107              	.LVL2:
 108              	.LBE48:
 109              	.LBE47:
  31:src/Riscv.cpp ****     if (scause == INTR_TIMER)
 110              		.loc 1 31 5 is_stmt 1
 111              	.LBB49:
 112 0050 9307F0FF 		li	a5,-1
 113 0054 9397F703 		slli	a5,a5,63
 114 0058 93871700 		addi	a5,a5,1
 115 005c 630AF704 		beq	a4,a5,.L3
 116              	.LBE49:
  32:src/Riscv.cpp ****     {
  33:src/Riscv.cpp ****         // ccb::timeSliceCounter++;
  34:src/Riscv.cpp ****         // if (ccb::timeSliceCounter >= ccb::running->getTimeSlice())
  35:src/Riscv.cpp ****         // {
  36:src/Riscv.cpp ****         //     uint64 sepc = r_sepc();
  37:src/Riscv.cpp ****         //     uint64 sstatus = r_sstatus();
  38:src/Riscv.cpp ****         //     ccb::timeSliceCounter = 0;
  39:src/Riscv.cpp ****         //     ccb::dispatch();
  40:src/Riscv.cpp ****         //     w_sstatus(sstatus);
  41:src/Riscv.cpp ****         //     w_sepc(sepc);
  42:src/Riscv.cpp ****         // }
  43:src/Riscv.cpp ****         // mc_sip(SIP_SSIP);
  44:src/Riscv.cpp ****     }
  45:src/Riscv.cpp ****     else if(scause == ECALL_USER || scause == ECALL_SUPERVISOR){
 117              		.loc 1 45 10
 118              	.LBB104:
 119              	.LBB50:
 120              		.loc 1 45 34 is_stmt 0
 121 0060 930787FF 		addi	a5,a4,-8
 122              		.loc 1 45 10
 123 0064 93061000 		li	a3,1
 124 0068 63F0F606 		bleu	a5,a3,.L12
GAS LISTING /tmp/cce5b6OA.s 			page 7


  46:src/Riscv.cpp ****         uint64 intrId;
  47:src/Riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (intrId));
  48:src/Riscv.cpp ****         if(intrId == MEM_ALLOC){
  49:src/Riscv.cpp ****             uint64 numBlocks = 0;
  50:src/Riscv.cpp ****             asm ("mv %0, a1" : "=r" (numBlocks));
  51:src/Riscv.cpp ****             MemoryAllocator::allocate(numBlocks);
  52:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
  53:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
  54:src/Riscv.cpp ****         }
  55:src/Riscv.cpp ****         else if(intrId == MEM_FREE){
  56:src/Riscv.cpp ****             void* address = nullptr;
  57:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (address));
  58:src/Riscv.cpp ****             MemoryAllocator::free(address);
  59:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
  60:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
  61:src/Riscv.cpp ****         }
  62:src/Riscv.cpp ****         else if(intrId == THREAD_CREATE){
  63:src/Riscv.cpp ****             CCB** handle;
  64:src/Riscv.cpp ****             CCB::Body body;
  65:src/Riscv.cpp ****             void* args;
  66:src/Riscv.cpp ****             //uint64 *stack;
  67:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
  68:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (body));
  69:src/Riscv.cpp ****             __asm__ volatile ("ld a3, 0x68(%0)" : : "r" (backupSP));
  70:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a3" : "=r" (args));
  71:src/Riscv.cpp ****             //__asm__ volatile ("ld a4, 0x70(%0)" : : "r" (backupSP));
  72:src/Riscv.cpp ****             //__asm__ volatile ("mv %0, a4" : "=r" (stack));
  73:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body);
  74:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
  75:src/Riscv.cpp ****         }
  76:src/Riscv.cpp ****         else if(intrId == THREAD_DISPATCH) {
  77:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
  78:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
  79:src/Riscv.cpp ****             //ccb::running->timeSliceCounter = 0;
  80:src/Riscv.cpp ****             CCB::dispatch();
  81:src/Riscv.cpp ****             w_sstatus(sstatus);
  82:src/Riscv.cpp ****             w_sepc(sepc);
  83:src/Riscv.cpp ****         }
  84:src/Riscv.cpp ****         else if(intrId == THREAD_EXIT){
  85:src/Riscv.cpp ****             CCB::running->setFinished(true);
  86:src/Riscv.cpp ****             CCB::yield();
  87:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
  88:src/Riscv.cpp ****         }
  89:src/Riscv.cpp **** 
  90:src/Riscv.cpp ****     }
  91:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL) {
 125              		.loc 1 91 10 is_stmt 1
 126 006c 9307F0FF 		li	a5,-1
 127 0070 9397F703 		slli	a5,a5,63
 128 0074 93879700 		addi	a5,a5,9
 129 0078 6304F718 		beq	a4,a5,.L13
  92:src/Riscv.cpp ****         console_handler();
  93:src/Riscv.cpp ****     }
  94:src/Riscv.cpp ****     else {
  95:src/Riscv.cpp ****         printString("Error ");
 130              		.loc 1 95 9
 131              		.loc 1 95 20 is_stmt 0
GAS LISTING /tmp/cce5b6OA.s 			page 8


 132 007c 17050000 		lla	a0,.LC0
 132      13050500 
 133 0084 97000000 		call	_Z11printStringPKc@plt
 133      E7800000 
 134              	.LVL3:
  96:src/Riscv.cpp ****         printInteger(r_scause());
 135              		.loc 1 96 9 is_stmt 1
 136              	.LBB51:
 137              	.LBB52:
  99:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 138              		.loc 2 99 5
 100:src/../h/Riscv.hpp ****     return scause;
 139              		.loc 2 100 5
 100:src/../h/Riscv.hpp ****     return scause;
 140              		.loc 2 100 72 is_stmt 0
 141              	#APP
 142              	# 100 "src/../h/Riscv.hpp" 1
 143              		csrr a5, scause
 144              	# 0 "" 2
 145              	#NO_APP
 146 0090 233CF4FC 		sd	a5,-40(s0)
 101:src/../h/Riscv.hpp **** }
 147              		.loc 2 101 5 is_stmt 1
 101:src/../h/Riscv.hpp **** }
 148              		.loc 2 101 12 is_stmt 0
 149 0094 033584FD 		ld	a0,-40(s0)
 150              	.LBE52:
 151              	.LBE51:
 152              		.loc 1 96 21
 153 0098 97000000 		call	_Z12printIntegerm@plt
 153      E7800000 
 154              	.LVL4:
  97:src/Riscv.cpp ****         printString("\n");
 155              		.loc 1 97 9 is_stmt 1
 156              		.loc 1 97 20 is_stmt 0
 157 00a0 17050000 		lla	a0,.LC1
 157      13050500 
 158 00a8 97000000 		call	_Z11printStringPKc@plt
 158      E7800000 
 159              	.LVL5:
 160              	.L3:
 161              	.LBE50:
 162              	.LBE104:
  98:src/Riscv.cpp ****     }
  99:src/Riscv.cpp **** }...
 163              		.loc 1 99 1
 164 00b0 83308105 		ld	ra,88(sp)
 165              		.cfi_remember_state
 166              		.cfi_restore 1
 167 00b4 03340105 		ld	s0,80(sp)
 168              		.cfi_restore 8
 169              		.cfi_def_cfa 2, 96
 170 00b8 83348104 		ld	s1,72(sp)
 171              		.cfi_restore 9
 172 00bc 03390104 		ld	s2,64(sp)
 173              		.cfi_restore 18
 174 00c0 13010106 		addi	sp,sp,96
GAS LISTING /tmp/cce5b6OA.s 			page 9


 175              		.cfi_def_cfa_offset 0
 176 00c4 67800000 		jr	ra
 177              	.LVL6:
 178              	.L12:
 179              		.cfi_restore_state
 180              	.LBB105:
 181              	.LBB100:
 182              	.LBB53:
  46:src/Riscv.cpp ****         uint64 intrId;
 183              		.loc 1 46 9 is_stmt 1
  47:src/Riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (intrId));
 184              		.loc 1 47 9
  47:src/Riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (intrId));
 185              		.loc 1 47 54 is_stmt 0
 186              	#APP
 187              	# 47 "src/Riscv.cpp" 1
 188              		mv a5, a0
 189              	# 0 "" 2
 190              	.LVL7:
  48:src/Riscv.cpp ****         if(intrId == MEM_ALLOC){
 191              		.loc 1 48 9 is_stmt 1
 192              	#NO_APP
 193              	.LBB54:
 194 00cc 13071000 		li	a4,1
 195              	.LVL8:
 196 00d0 638CE704 		beq	a5,a4,.L14
 197              	.LBE54:
 198              	.LBE53:
 199              	.LBE100:
 200              	.LBE105:
  55:src/Riscv.cpp ****         else if(intrId == MEM_FREE){
 201              		.loc 1 55 14
 202              	.LBB106:
 203              	.LBB101:
 204              	.LBB97:
 205              	.LBB94:
 206              	.LBB55:
 207 00d4 13072000 		li	a4,2
 208 00d8 6382E708 		beq	a5,a4,.L15
 209              	.LBE55:
 210              	.LBE94:
 211              	.LBE97:
 212              	.LBE101:
 213              	.LBE106:
  62:src/Riscv.cpp ****         else if(intrId == THREAD_CREATE){
 214              		.loc 1 62 14
 215              	.LBB107:
 216              	.LBB102:
 217              	.LBB98:
 218              	.LBB95:
 219              	.LBB86:
 220              	.LBB56:
 221 00dc 13071001 		li	a4,17
 222 00e0 6388E70A 		beq	a5,a4,.L16
 223              	.LBE56:
 224              	.LBE86:
 225              	.LBE95:
GAS LISTING /tmp/cce5b6OA.s 			page 10


 226              	.LBE98:
 227              	.LBE102:
 228              	.LBE107:
  76:src/Riscv.cpp ****         else if(intrId == THREAD_DISPATCH) {
 229              		.loc 1 76 14
 230              	.LBB108:
 231              	.LBB103:
 232              	.LBB99:
 233              	.LBB96:
 234              	.LBB87:
 235              	.LBB79:
 236              	.LBB57:
 237 00e4 13073001 		li	a4,19
 238 00e8 6384E70E 		beq	a5,a4,.L17
  84:src/Riscv.cpp ****         else if(intrId == THREAD_EXIT){
 239              		.loc 1 84 14
 240 00ec 13072001 		li	a4,18
 241 00f0 E390E7FC 		bne	a5,a4,.L3
  85:src/Riscv.cpp ****             CCB::running->setFinished(true);
 242              		.loc 1 85 13
  85:src/Riscv.cpp ****             CCB::running->setFinished(true);
 243              		.loc 1 85 38 is_stmt 0
 244 00f4 97070000 		la	a5,_ZN3CCB7runningE
 244      83B70700 
 245              	.LVL9:
 246 00fc 83B70700 		ld	a5,0(a5)
 247              	.LVL10:
 248              	.LBB58:
 249              	.LBB59:
 250              		.file 3 "src/../h/ccb.hpp"
   1:src/../h/ccb.hpp **** //
   2:src/../h/ccb.hpp **** // Created by os on 6/24/22.
   3:src/../h/ccb.hpp **** //
   4:src/../h/ccb.hpp **** 
   5:src/../h/ccb.hpp **** #ifndef PROJECT_V33333333333_CCB_HPP
   6:src/../h/ccb.hpp **** #define PROJECT_V33333333333_CCB_HPP
   7:src/../h/ccb.hpp **** #include "../lib/hw.h"
   8:src/../h/ccb.hpp **** #include "Scheduler.hpp"
   9:src/../h/ccb.hpp **** #include "syscall_c.h"
  10:src/../h/ccb.hpp **** #include "MemoryAllocator.hpp"
  11:src/../h/ccb.hpp **** #include "Riscv.hpp"
  12:src/../h/ccb.hpp **** 
  13:src/../h/ccb.hpp **** // Coroutine Control Block
  14:src/../h/ccb.hpp **** class CCB
  15:src/../h/ccb.hpp **** {
  16:src/../h/ccb.hpp **** public:
  17:src/../h/ccb.hpp ****     ~CCB() { delete[] stack; }
  18:src/../h/ccb.hpp **** 
  19:src/../h/ccb.hpp ****     void* operator new(size_t size) {
  20:src/../h/ccb.hpp ****         return MemoryAllocator::allocateB(size);
  21:src/../h/ccb.hpp ****     }
  22:src/../h/ccb.hpp **** 
  23:src/../h/ccb.hpp ****     void operator delete(void* address) {
  24:src/../h/ccb.hpp ****         MemoryAllocator::free(address);
  25:src/../h/ccb.hpp ****     }
  26:src/../h/ccb.hpp **** 
  27:src/../h/ccb.hpp ****     bool isFinished() const { return finished; }
GAS LISTING /tmp/cce5b6OA.s 			page 11


  28:src/../h/ccb.hpp **** 
  29:src/../h/ccb.hpp ****     void setFinished(bool value) { finished = value;}
 251              		.loc 3 29 36 is_stmt 1
 252              		.loc 3 29 45 is_stmt 0
 253 0100 13071000 		li	a4,1
 254 0104 2380E702 		sb	a4,32(a5)
 255              	.LVL11:
 256              	.LBE59:
 257              	.LBE58:
  86:src/Riscv.cpp ****             CCB::yield();
 258              		.loc 1 86 13 is_stmt 1
  86:src/Riscv.cpp ****             CCB::yield();
 259              		.loc 1 86 23 is_stmt 0
 260 0108 97000000 		call	_ZN3CCB5yieldEv@plt
 260      E7800000 
 261              	.LVL12:
  87:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 262              		.loc 1 87 13 is_stmt 1
 263              	.LBB60:
 264              	.LBB61:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 265              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 266              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 267              		.loc 2 112 64 is_stmt 0
 268              	#APP
 269              	# 112 "src/../h/Riscv.hpp" 1
 270              		csrr a5, sepc
 271              	# 0 "" 2
 272              	#NO_APP
 273 0114 2338F4FC 		sd	a5,-48(s0)
 113:src/../h/Riscv.hpp **** }
 274              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 275              		.loc 2 113 12 is_stmt 0
 276 0118 833704FD 		ld	a5,-48(s0)
 277              	.LBE61:
 278              	.LBE60:
  87:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 279              		.loc 1 87 19
 280 011c 93874700 		addi	a5,a5,4
 281              	.LVL13:
 282              	.LBB62:
 283              	.LBB63:
 118:src/../h/Riscv.hpp **** }
 284              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 285              		.loc 2 118 65 is_stmt 0
 286              	#APP
 287              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 288              		csrw sepc, a5
 289              	# 0 "" 2
 290              		.loc 2 119 1
 291              	#NO_APP
 292 0124 6FF0DFF8 		j	.L3
GAS LISTING /tmp/cce5b6OA.s 			page 12


 293              	.LVL14:
 294              	.L14:
 295              	.LBE63:
 296              	.LBE62:
 297              	.LBE57:
 298              	.LBE79:
 299              	.LBE87:
 300              	.LBB88:
  49:src/Riscv.cpp ****             uint64 numBlocks = 0;
 301              		.loc 1 49 13 is_stmt 1
  50:src/Riscv.cpp ****             asm ("mv %0, a1" : "=r" (numBlocks));
 302              		.loc 1 50 13
  50:src/Riscv.cpp ****             asm ("mv %0, a1" : "=r" (numBlocks));
 303              		.loc 1 50 49 is_stmt 0
 304              	#APP
 305              	# 50 "src/Riscv.cpp" 1
 306              		mv a0, a1
 307              	# 0 "" 2
 308              	.LVL15:
  51:src/Riscv.cpp ****             MemoryAllocator::allocate(numBlocks);
 309              		.loc 1 51 13 is_stmt 1
  51:src/Riscv.cpp ****             MemoryAllocator::allocate(numBlocks);
 310              		.loc 1 51 38 is_stmt 0
 311              	#NO_APP
 312 012c 97000000 		call	_ZN15MemoryAllocator8allocateEm@plt
 312      E7800000 
 313              	.LVL16:
  52:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
 314              		.loc 1 52 13 is_stmt 1
  52:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
 315              		.loc 1 52 67 is_stmt 0
 316 0134 97070000 		la	a5,backupSP
 316      83B70700 
 317 013c 83B70700 		ld	a5,0(a5)
 318              	#APP
 319              	# 52 "src/Riscv.cpp" 1
  53:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 320              		sd a0, 0x50(a5)
 321              	# 0 "" 2
 322              		.loc 1 53 13 is_stmt 1
 323              	#NO_APP
 324              	.LBB89:
 325              	.LBB90:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 326              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 327              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 328              		.loc 2 112 64 is_stmt 0
 329              	#APP
 330              	# 112 "src/../h/Riscv.hpp" 1
 331              		csrr a5, sepc
 332              	# 0 "" 2
 333              	#NO_APP
 334 0148 2334F4FA 		sd	a5,-88(s0)
 113:src/../h/Riscv.hpp **** }
 335              		.loc 2 113 5 is_stmt 1
GAS LISTING /tmp/cce5b6OA.s 			page 13


 113:src/../h/Riscv.hpp **** }
 336              		.loc 2 113 12 is_stmt 0
 337 014c 833784FA 		ld	a5,-88(s0)
 338              	.LBE90:
 339              	.LBE89:
  53:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 340              		.loc 1 53 19
 341 0150 93874700 		addi	a5,a5,4
 342              	.LVL17:
 343              	.LBB91:
 344              	.LBB92:
 118:src/../h/Riscv.hpp **** }
 345              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 346              		.loc 2 118 65 is_stmt 0
 347              	#APP
 348              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 349              		csrw sepc, a5
 350              	# 0 "" 2
 351              		.loc 2 119 1
 352              	#NO_APP
 353 0158 6FF09FF5 		j	.L3
 354              	.LVL18:
 355              	.L15:
 356              	.LBE92:
 357              	.LBE91:
 358              	.LBE88:
 359              	.LBB93:
 360              	.LBB80:
  56:src/Riscv.cpp ****             void* address = nullptr;
 361              		.loc 1 56 13 is_stmt 1
  57:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (address));
 362              		.loc 1 57 13
  57:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (address));
 363              		.loc 1 57 59 is_stmt 0
 364              	#APP
 365              	# 57 "src/Riscv.cpp" 1
 366              		mv a0, a1
 367              	# 0 "" 2
 368              	.LVL19:
  58:src/Riscv.cpp ****             MemoryAllocator::free(address);
 369              		.loc 1 58 13 is_stmt 1
  58:src/Riscv.cpp ****             MemoryAllocator::free(address);
 370              		.loc 1 58 34 is_stmt 0
 371              	#NO_APP
 372 0160 97000000 		call	_ZN15MemoryAllocator4freeEPv@plt
 372      E7800000 
 373              	.LVL20:
  59:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
 374              		.loc 1 59 13 is_stmt 1
  59:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
 375              		.loc 1 59 67 is_stmt 0
 376 0168 97070000 		la	a5,backupSP
 376      83B70700 
 377 0170 83B70700 		ld	a5,0(a5)
 378              	#APP
GAS LISTING /tmp/cce5b6OA.s 			page 14


 379              	# 59 "src/Riscv.cpp" 1
  60:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 380              		sd a0, 0x50(a5)
 381              	# 0 "" 2
 382              		.loc 1 60 13 is_stmt 1
 383              	#NO_APP
 384              	.LBB81:
 385              	.LBB82:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 386              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 387              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 388              		.loc 2 112 64 is_stmt 0
 389              	#APP
 390              	# 112 "src/../h/Riscv.hpp" 1
 391              		csrr a5, sepc
 392              	# 0 "" 2
 393              	#NO_APP
 394 017c 2338F4FA 		sd	a5,-80(s0)
 113:src/../h/Riscv.hpp **** }
 395              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 396              		.loc 2 113 12 is_stmt 0
 397 0180 833704FB 		ld	a5,-80(s0)
 398              	.LBE82:
 399              	.LBE81:
  60:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 400              		.loc 1 60 19
 401 0184 93874700 		addi	a5,a5,4
 402              	.LVL21:
 403              	.LBB83:
 404              	.LBB84:
 118:src/../h/Riscv.hpp **** }
 405              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 406              		.loc 2 118 65 is_stmt 0
 407              	#APP
 408              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 409              		csrw sepc, a5
 410              	# 0 "" 2
 411              		.loc 2 119 1
 412              	#NO_APP
 413 018c 6FF05FF2 		j	.L3
 414              	.LVL22:
 415              	.L16:
 416              	.LBE84:
 417              	.LBE83:
 418              	.LBE80:
 419              	.LBB85:
 420              	.LBB73:
  63:src/Riscv.cpp ****             CCB** handle;
 421              		.loc 1 63 13 is_stmt 1
  64:src/Riscv.cpp ****             CCB::Body body;
 422              		.loc 1 64 13
  65:src/Riscv.cpp ****             void* args;
GAS LISTING /tmp/cce5b6OA.s 			page 15


 423              		.loc 1 65 13
  67:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 424              		.loc 1 67 13
  67:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 425              		.loc 1 67 59 is_stmt 0
 426              	#APP
 427              	# 67 "src/Riscv.cpp" 1
 428              		mv s1, a1
 429              	# 0 "" 2
 430              	.LVL23:
  68:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (body));
 431              		.loc 1 68 13 is_stmt 1
  68:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (body));
 432              		.loc 1 68 57 is_stmt 0
 433              	# 68 "src/Riscv.cpp" 1
 434              		mv a0, a2
 435              	# 0 "" 2
 436              	.LVL24:
  69:src/Riscv.cpp ****             __asm__ volatile ("ld a3, 0x68(%0)" : : "r" (backupSP));
 437              		.loc 1 69 13 is_stmt 1
  69:src/Riscv.cpp ****             __asm__ volatile ("ld a3, 0x68(%0)" : : "r" (backupSP));
 438              		.loc 1 69 68 is_stmt 0
 439              	#NO_APP
 440 0198 97070000 		la	a5,backupSP
 440      83B70700 
 441              	.LVL25:
 442 01a0 83B70700 		ld	a5,0(a5)
 443              	#APP
 444              	# 69 "src/Riscv.cpp" 1
  70:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a3" : "=r" (args));
 445              		ld a3, 0x68(a5)
 446              	# 0 "" 2
 447              		.loc 1 70 13 is_stmt 1
  70:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a3" : "=r" (args));
 448              		.loc 1 70 57 is_stmt 0
 449              	# 70 "src/Riscv.cpp" 1
 450              		mv a5, a3
 451              	# 0 "" 2
 452              	.LVL26:
  73:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body);
 453              		.loc 1 73 13 is_stmt 1
  73:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body);
 454              		.loc 1 73 43 is_stmt 0
 455              	#NO_APP
 456 01ac 97000000 		call	_ZN3CCB15createCoroutineEPFvvE@plt
 456      E7800000 
 457              	.LVL27:
  73:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body);
 458              		.loc 1 73 21
 459 01b4 23B0A400 		sd	a0,0(s1)
  74:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 460              		.loc 1 74 13 is_stmt 1
 461              	.LBB74:
 462              	.LBB75:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 463              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
GAS LISTING /tmp/cce5b6OA.s 			page 16


 464              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 465              		.loc 2 112 64 is_stmt 0
 466              	#APP
 467              	# 112 "src/../h/Riscv.hpp" 1
 468              		csrr a5, sepc
 469              	# 0 "" 2
 470              	#NO_APP
 471 01bc 233CF4FA 		sd	a5,-72(s0)
 113:src/../h/Riscv.hpp **** }
 472              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 473              		.loc 2 113 12 is_stmt 0
 474 01c0 833784FB 		ld	a5,-72(s0)
 475              	.LBE75:
 476              	.LBE74:
  74:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 477              		.loc 1 74 19
 478 01c4 93874700 		addi	a5,a5,4
 479              	.LVL28:
 480              	.LBB76:
 481              	.LBB77:
 118:src/../h/Riscv.hpp **** }
 482              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 483              		.loc 2 118 65 is_stmt 0
 484              	#APP
 485              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 486              		csrw sepc, a5
 487              	# 0 "" 2
 488              		.loc 2 119 1
 489              	#NO_APP
 490 01cc 6FF05FEE 		j	.L3
 491              	.LVL29:
 492              	.L17:
 493              	.LBE77:
 494              	.LBE76:
 495              	.LBE73:
 496              	.LBB78:
 497              	.LBB64:
  77:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 498              		.loc 1 77 13 is_stmt 1
 499              	.LBB65:
 500              	.LBB66:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 501              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 502              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 503              		.loc 2 112 64 is_stmt 0
 504              	#APP
 505              	# 112 "src/../h/Riscv.hpp" 1
 506              		csrr a5, sepc
 507              	# 0 "" 2
 508              	.LVL30:
 509              	#NO_APP
GAS LISTING /tmp/cce5b6OA.s 			page 17


 510 01d4 2334F4FC 		sd	a5,-56(s0)
 113:src/../h/Riscv.hpp **** }
 511              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 512              		.loc 2 113 12 is_stmt 0
 513 01d8 833484FC 		ld	s1,-56(s0)
 514              	.LBE66:
 515              	.LBE65:
  77:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 516              		.loc 1 77 38
 517 01dc 93844400 		addi	s1,s1,4
 518              	.LVL31:
  78:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 519              		.loc 1 78 13 is_stmt 1
 520              	.LBB67:
 521              	.LBB68:
 171:src/../h/Riscv.hpp **** 
 172:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 173:src/../h/Riscv.hpp **** {
 174:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 175:src/../h/Riscv.hpp **** }
 176:src/../h/Riscv.hpp **** 
 177:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus()
 178:src/../h/Riscv.hpp **** {
 179:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 522              		.loc 2 179 5
 180:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 523              		.loc 2 180 5
 524              		.loc 2 180 76 is_stmt 0
 525              	#APP
 526              	# 180 "src/../h/Riscv.hpp" 1
 181              	    return sstatus;
 527              		csrr a5, sstatus
 528              	# 0 "" 2
 529              	#NO_APP
 530 01e4 2330F4FC 		sd	a5,-64(s0)
 531              		.loc 2 181 5 is_stmt 1
 532              		.loc 2 181 12 is_stmt 0
 533 01e8 033904FC 		ld	s2,-64(s0)
 534              	.LVL32:
 535              	.LBE68:
 536              	.LBE67:
  80:src/Riscv.cpp ****             CCB::dispatch();
 537              		.loc 1 80 13 is_stmt 1
  80:src/Riscv.cpp ****             CCB::dispatch();
 538              		.loc 1 80 26 is_stmt 0
 539 01ec 97000000 		call	_ZN3CCB8dispatchEv@plt
 539      E7800000 
 540              	.LVL33:
  81:src/Riscv.cpp ****             w_sstatus(sstatus);
 541              		.loc 1 81 13 is_stmt 1
 542              	.LBB69:
 543              	.LBB70:
 182:src/../h/Riscv.hpp **** }
 183:src/../h/Riscv.hpp **** 
 184:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 185:src/../h/Riscv.hpp **** {
GAS LISTING /tmp/cce5b6OA.s 			page 18


 186:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 544              		.loc 2 186 5
 545              		.loc 2 186 77 is_stmt 0
 546              	#APP
 547              	# 186 "src/../h/Riscv.hpp" 1
 187              	}
 548              		csrw sstatus, s2
 549              	# 0 "" 2
 550              	.LVL34:
 551              	#NO_APP
 552              	.LBE70:
 553              	.LBE69:
  82:src/Riscv.cpp ****             w_sepc(sepc);
 554              		.loc 1 82 13 is_stmt 1
 555              	.LBB71:
 556              	.LBB72:
 118:src/../h/Riscv.hpp **** }
 557              		.loc 2 118 5
 118:src/../h/Riscv.hpp **** }
 558              		.loc 2 118 65 is_stmt 0
 559              	#APP
 560              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 561              		csrw sepc, s1
 562              	# 0 "" 2
 563              		.loc 2 119 1
 564              	#NO_APP
 565 01fc 6FF05FEB 		j	.L3
 566              	.LVL35:
 567              	.L13:
 568              	.LBE72:
 569              	.LBE71:
 570              	.LBE64:
 571              	.LBE78:
 572              	.LBE85:
 573              	.LBE93:
 574              	.LBE96:
 575              	.LBE99:
  92:src/Riscv.cpp ****         console_handler();
 576              		.loc 1 92 9 is_stmt 1
  92:src/Riscv.cpp ****         console_handler();
 577              		.loc 1 92 24 is_stmt 0
 578 0200 97000000 		call	console_handler@plt
 578      E7800000 
 579              	.LVL36:
 580 0208 6FF09FEA 		j	.L3
 581              	.LBE103:
 582              	.LBE108:
 583              		.cfi_endproc
 584              	.LFE39:
 586              	.Letext0:
 587              		.file 4 "src/../h/../lib/hw.h"
 588              		.file 5 "src/../h/MemoryAllocator.hpp"
 589              		.file 6 "src/../h/print.hpp"
 590              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/cce5b6OA.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/cce5b6OA.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cce5b6OA.s:13     .text:0000000000000000 .L0 
     /tmp/cce5b6OA.s:14     .text:0000000000000000 .L0 
     /tmp/cce5b6OA.s:15     .text:0000000000000004 .L0 
     /tmp/cce5b6OA.s:17     .text:0000000000000008 .L0 
     /tmp/cce5b6OA.s:19     .text:000000000000000c .L0 
     /tmp/cce5b6OA.s:21     .text:000000000000000c .L0 
       src/Riscv.cpp:23     .text:000000000000000c .L0 
     /tmp/cce5b6OA.s:27     .text:0000000000000010 .L0 
       src/Riscv.cpp:24     .text:0000000000000010 .L0 
     /tmp/cce5b6OA.s:37     .text:0000000000000014 .L0 
     /tmp/cce5b6OA.s:38     .text:0000000000000014 .L0 
     /tmp/cce5b6OA.s:39     .text:0000000000000014 .L0 
     /tmp/cce5b6OA.s:49     .text:000000000000001c .L0 
       src/Riscv.cpp:26     .text:000000000000001c .L0 
     /tmp/cce5b6OA.s:56     .text:0000000000000020 .L0 
     /tmp/cce5b6OA.s:57     .text:0000000000000024 .L0 
     /tmp/cce5b6OA.s:58     .text:0000000000000024 .L0 
     /tmp/cce5b6OA.s:60     .text:0000000000000028 .L0 
     /tmp/cce5b6OA.s:62     .text:000000000000002c .L0 
     /tmp/cce5b6OA.s:76     .text:000000000000002c _ZN5Riscv16interruptHandlerEv
     /tmp/cce5b6OA.s:79     .text:000000000000002c .L0 
     /tmp/cce5b6OA.s:80     .text:000000000000002c .L0 
     /tmp/cce5b6OA.s:81     .text:0000000000000030 .L0 
     /tmp/cce5b6OA.s:86     .text:0000000000000040 .L0 
     /tmp/cce5b6OA.s:87     .text:0000000000000040 .L0 
     /tmp/cce5b6OA.s:88     .text:0000000000000040 .L0 
     /tmp/cce5b6OA.s:89     .text:0000000000000040 .L0 
     /tmp/cce5b6OA.s:91     .text:0000000000000044 .L0 
     /tmp/cce5b6OA.s:95     .text:0000000000000044 .L0 
     /tmp/cce5b6OA.s:96     .text:0000000000000044 .L0 
     /tmp/cce5b6OA.s:97     .text:0000000000000044 .L0 
  src/../h/Riscv.hpp:100    .text:0000000000000044 .L0 
     /tmp/cce5b6OA.s:105    .text:000000000000004c .L0 
     /tmp/cce5b6OA.s:106    .text:000000000000004c .L0 
     /tmp/cce5b6OA.s:112    .text:0000000000000050 .L0 
     /tmp/cce5b6OA.s:120    .text:0000000000000060 .L0 
     /tmp/cce5b6OA.s:121    .text:0000000000000060 .L0 
     /tmp/cce5b6OA.s:123    .text:0000000000000064 .L0 
     /tmp/cce5b6OA.s:126    .text:000000000000006c .L0 
     /tmp/cce5b6OA.s:131    .text:000000000000007c .L0 
     /tmp/cce5b6OA.s:132    .text:000000000000007c .L0 
     /tmp/cce5b6OA.s:138    .text:000000000000008c .L0 
     /tmp/cce5b6OA.s:139    .text:000000000000008c .L0 
     /tmp/cce5b6OA.s:140    .text:000000000000008c .L0 
  src/../h/Riscv.hpp:100    .text:000000000000008c .L0 
     /tmp/cce5b6OA.s:148    .text:0000000000000094 .L0 
     /tmp/cce5b6OA.s:149    .text:0000000000000094 .L0 
     /tmp/cce5b6OA.s:153    .text:0000000000000098 .L0 
     /tmp/cce5b6OA.s:156    .text:00000000000000a0 .L0 
     /tmp/cce5b6OA.s:157    .text:00000000000000a0 .L0 
     /tmp/cce5b6OA.s:164    .text:00000000000000b0 .L0 
     /tmp/cce5b6OA.s:165    .text:00000000000000b4 .L0 
     /tmp/cce5b6OA.s:166    .text:00000000000000b4 .L0 
     /tmp/cce5b6OA.s:168    .text:00000000000000b8 .L0 
GAS LISTING /tmp/cce5b6OA.s 			page 20


     /tmp/cce5b6OA.s:169    .text:00000000000000b8 .L0 
     /tmp/cce5b6OA.s:171    .text:00000000000000bc .L0 
     /tmp/cce5b6OA.s:173    .text:00000000000000c0 .L0 
     /tmp/cce5b6OA.s:175    .text:00000000000000c4 .L0 
     /tmp/cce5b6OA.s:179    .text:00000000000000c8 .L0 
     /tmp/cce5b6OA.s:184    .text:00000000000000c8 .L0 
     /tmp/cce5b6OA.s:185    .text:00000000000000c8 .L0 
       src/Riscv.cpp:47     .text:00000000000000c8 .L0 
     /tmp/cce5b6OA.s:194    .text:00000000000000cc .L0 
     /tmp/cce5b6OA.s:207    .text:00000000000000d4 .L0 
     /tmp/cce5b6OA.s:221    .text:00000000000000dc .L0 
     /tmp/cce5b6OA.s:237    .text:00000000000000e4 .L0 
     /tmp/cce5b6OA.s:240    .text:00000000000000ec .L0 
     /tmp/cce5b6OA.s:243    .text:00000000000000f4 .L0 
     /tmp/cce5b6OA.s:244    .text:00000000000000f4 .L0 
     /tmp/cce5b6OA.s:252    .text:0000000000000100 .L0 
     /tmp/cce5b6OA.s:253    .text:0000000000000100 .L0 
     /tmp/cce5b6OA.s:259    .text:0000000000000108 .L0 
     /tmp/cce5b6OA.s:260    .text:0000000000000108 .L0 
     /tmp/cce5b6OA.s:265    .text:0000000000000110 .L0 
     /tmp/cce5b6OA.s:266    .text:0000000000000110 .L0 
     /tmp/cce5b6OA.s:267    .text:0000000000000110 .L0 
  src/../h/Riscv.hpp:112    .text:0000000000000110 .L0 
     /tmp/cce5b6OA.s:275    .text:0000000000000118 .L0 
     /tmp/cce5b6OA.s:276    .text:0000000000000118 .L0 
     /tmp/cce5b6OA.s:280    .text:000000000000011c .L0 
     /tmp/cce5b6OA.s:285    .text:0000000000000120 .L0 
  src/../h/Riscv.hpp:118    .text:0000000000000120 .L0 
     /tmp/cce5b6OA.s:292    .text:0000000000000124 .L0 
     /tmp/cce5b6OA.s:302    .text:0000000000000128 .L0 
     /tmp/cce5b6OA.s:303    .text:0000000000000128 .L0 
       src/Riscv.cpp:50     .text:0000000000000128 .L0 
     /tmp/cce5b6OA.s:310    .text:000000000000012c .L0 
     /tmp/cce5b6OA.s:312    .text:000000000000012c .L0 
     /tmp/cce5b6OA.s:315    .text:0000000000000134 .L0 
     /tmp/cce5b6OA.s:316    .text:0000000000000134 .L0 
     /tmp/cce5b6OA.s:326    .text:0000000000000144 .L0 
     /tmp/cce5b6OA.s:327    .text:0000000000000144 .L0 
     /tmp/cce5b6OA.s:328    .text:0000000000000144 .L0 
  src/../h/Riscv.hpp:112    .text:0000000000000144 .L0 
     /tmp/cce5b6OA.s:336    .text:000000000000014c .L0 
     /tmp/cce5b6OA.s:337    .text:000000000000014c .L0 
     /tmp/cce5b6OA.s:341    .text:0000000000000150 .L0 
     /tmp/cce5b6OA.s:346    .text:0000000000000154 .L0 
  src/../h/Riscv.hpp:118    .text:0000000000000154 .L0 
     /tmp/cce5b6OA.s:353    .text:0000000000000158 .L0 
     /tmp/cce5b6OA.s:362    .text:000000000000015c .L0 
     /tmp/cce5b6OA.s:363    .text:000000000000015c .L0 
       src/Riscv.cpp:57     .text:000000000000015c .L0 
     /tmp/cce5b6OA.s:370    .text:0000000000000160 .L0 
     /tmp/cce5b6OA.s:372    .text:0000000000000160 .L0 
     /tmp/cce5b6OA.s:375    .text:0000000000000168 .L0 
     /tmp/cce5b6OA.s:376    .text:0000000000000168 .L0 
     /tmp/cce5b6OA.s:386    .text:0000000000000178 .L0 
     /tmp/cce5b6OA.s:387    .text:0000000000000178 .L0 
     /tmp/cce5b6OA.s:388    .text:0000000000000178 .L0 
  src/../h/Riscv.hpp:112    .text:0000000000000178 .L0 
GAS LISTING /tmp/cce5b6OA.s 			page 21


     /tmp/cce5b6OA.s:396    .text:0000000000000180 .L0 
     /tmp/cce5b6OA.s:397    .text:0000000000000180 .L0 
     /tmp/cce5b6OA.s:401    .text:0000000000000184 .L0 
     /tmp/cce5b6OA.s:406    .text:0000000000000188 .L0 
  src/../h/Riscv.hpp:118    .text:0000000000000188 .L0 
     /tmp/cce5b6OA.s:413    .text:000000000000018c .L0 
     /tmp/cce5b6OA.s:422    .text:0000000000000190 .L0 
     /tmp/cce5b6OA.s:423    .text:0000000000000190 .L0 
     /tmp/cce5b6OA.s:424    .text:0000000000000190 .L0 
     /tmp/cce5b6OA.s:425    .text:0000000000000190 .L0 
       src/Riscv.cpp:67     .text:0000000000000190 .L0 
     /tmp/cce5b6OA.s:432    .text:0000000000000194 .L0 
       src/Riscv.cpp:68     .text:0000000000000194 .L0 
     /tmp/cce5b6OA.s:438    .text:0000000000000198 .L0 
     /tmp/cce5b6OA.s:440    .text:0000000000000198 .L0 
     /tmp/cce5b6OA.s:448    .text:00000000000001a8 .L0 
       src/Riscv.cpp:70     .text:00000000000001a8 .L0 
     /tmp/cce5b6OA.s:454    .text:00000000000001ac .L0 
     /tmp/cce5b6OA.s:456    .text:00000000000001ac .L0 
     /tmp/cce5b6OA.s:459    .text:00000000000001b4 .L0 
     /tmp/cce5b6OA.s:463    .text:00000000000001b8 .L0 
     /tmp/cce5b6OA.s:464    .text:00000000000001b8 .L0 
     /tmp/cce5b6OA.s:465    .text:00000000000001b8 .L0 
  src/../h/Riscv.hpp:112    .text:00000000000001b8 .L0 
     /tmp/cce5b6OA.s:473    .text:00000000000001c0 .L0 
     /tmp/cce5b6OA.s:474    .text:00000000000001c0 .L0 
     /tmp/cce5b6OA.s:478    .text:00000000000001c4 .L0 
     /tmp/cce5b6OA.s:483    .text:00000000000001c8 .L0 
  src/../h/Riscv.hpp:118    .text:00000000000001c8 .L0 
     /tmp/cce5b6OA.s:490    .text:00000000000001cc .L0 
     /tmp/cce5b6OA.s:501    .text:00000000000001d0 .L0 
     /tmp/cce5b6OA.s:502    .text:00000000000001d0 .L0 
     /tmp/cce5b6OA.s:503    .text:00000000000001d0 .L0 
  src/../h/Riscv.hpp:112    .text:00000000000001d0 .L0 
     /tmp/cce5b6OA.s:512    .text:00000000000001d8 .L0 
     /tmp/cce5b6OA.s:513    .text:00000000000001d8 .L0 
     /tmp/cce5b6OA.s:517    .text:00000000000001dc .L0 
     /tmp/cce5b6OA.s:522    .text:00000000000001e0 .L0 
     /tmp/cce5b6OA.s:523    .text:00000000000001e0 .L0 
     /tmp/cce5b6OA.s:524    .text:00000000000001e0 .L0 
  src/../h/Riscv.hpp:180    .text:00000000000001e0 .L0 
     /tmp/cce5b6OA.s:532    .text:00000000000001e8 .L0 
     /tmp/cce5b6OA.s:533    .text:00000000000001e8 .L0 
     /tmp/cce5b6OA.s:538    .text:00000000000001ec .L0 
     /tmp/cce5b6OA.s:539    .text:00000000000001ec .L0 
     /tmp/cce5b6OA.s:544    .text:00000000000001f4 .L0 
     /tmp/cce5b6OA.s:545    .text:00000000000001f4 .L0 
  src/../h/Riscv.hpp:186    .text:00000000000001f4 .L0 
     /tmp/cce5b6OA.s:557    .text:00000000000001f8 .L0 
     /tmp/cce5b6OA.s:558    .text:00000000000001f8 .L0 
  src/../h/Riscv.hpp:118    .text:00000000000001f8 .L0 
     /tmp/cce5b6OA.s:565    .text:00000000000001fc .L0 
     /tmp/cce5b6OA.s:577    .text:0000000000000200 .L0 
     /tmp/cce5b6OA.s:578    .text:0000000000000200 .L0 
     /tmp/cce5b6OA.s:583    .text:000000000000020c .L0 
     /tmp/cce5b6OA.s:591    .text:000000000000020c .L0 
     /tmp/cce5b6OA.s:67     .rodata.str1.8:0000000000000000 .LC0
GAS LISTING /tmp/cce5b6OA.s 			page 22


     /tmp/cce5b6OA.s:132    .text:000000000000007c .L0 
     /tmp/cce5b6OA.s:70     .rodata.str1.8:0000000000000008 .LC1
     /tmp/cce5b6OA.s:157    .text:00000000000000a0 .L0 
     /tmp/cce5b6OA.s:244    .text:00000000000000f4 .L0 
     /tmp/cce5b6OA.s:316    .text:0000000000000134 .L0 
     /tmp/cce5b6OA.s:376    .text:0000000000000168 .L0 
     /tmp/cce5b6OA.s:440    .text:0000000000000198 .L0 
     /tmp/cce5b6OA.s:160    .text:00000000000000b0 .L3
     /tmp/cce5b6OA.s:178    .text:00000000000000c8 .L12
     /tmp/cce5b6OA.s:567    .text:0000000000000200 .L13
     /tmp/cce5b6OA.s:294    .text:0000000000000128 .L14
     /tmp/cce5b6OA.s:355    .text:000000000000015c .L15
     /tmp/cce5b6OA.s:415    .text:0000000000000190 .L16
     /tmp/cce5b6OA.s:492    .text:00000000000001d0 .L17
     /tmp/cce5b6OA.s:1762   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cce5b6OA.s:3007   .debug_str:000000000000065a .LASF119
     /tmp/cce5b6OA.s:2915   .debug_str:000000000000039a .LASF120
     /tmp/cce5b6OA.s:2827   .debug_str:00000000000000f4 .LASF121
     /tmp/cce5b6OA.s:5      .text:0000000000000000 .Ltext0
     /tmp/cce5b6OA.s:586    .text:000000000000020c .Letext0
     /tmp/cce5b6OA.s:2785   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cce5b6OA.s:2933   .debug_str:000000000000043d .LASF0
     /tmp/cce5b6OA.s:2951   .debug_str:0000000000000490 .LASF1
     /tmp/cce5b6OA.s:2917   .debug_str:00000000000003a8 .LASF2
     /tmp/cce5b6OA.s:2891   .debug_str:00000000000002f0 .LASF4
     /tmp/cce5b6OA.s:2987   .debug_str:00000000000005c9 .LASF3
     /tmp/cce5b6OA.s:2811   .debug_str:0000000000000087 .LASF5
     /tmp/cce5b6OA.s:2955   .debug_str:00000000000004d1 .LASF6
     /tmp/cce5b6OA.s:2931   .debug_str:000000000000042a .LASF7
     /tmp/cce5b6OA.s:3017   .debug_str:0000000000000751 .LASF8
     /tmp/cce5b6OA.s:2877   .debug_str:0000000000000279 .LASF9
     /tmp/cce5b6OA.s:2963   .debug_str:0000000000000512 .LASF10
     /tmp/cce5b6OA.s:3011   .debug_str:000000000000072b .LASF11
     /tmp/cce5b6OA.s:2817   .debug_str:00000000000000a5 .LASF12
     /tmp/cce5b6OA.s:2791   .debug_str:0000000000000022 .LASF13
     /tmp/cce5b6OA.s:2831   .debug_str:000000000000011d .LASF14
     /tmp/cce5b6OA.s:2981   .debug_str:0000000000000595 .LASF15
     /tmp/cce5b6OA.s:2841   .debug_str:0000000000000156 .LASF16
     /tmp/cce5b6OA.s:2949   .debug_str:000000000000048a .LASF63
     /tmp/cce5b6OA.s:2845   .debug_str:0000000000000180 .LASF122
     /tmp/cce5b6OA.s:2839   .debug_str:000000000000014a .LASF17
     /tmp/cce5b6OA.s:2905   .debug_str:0000000000000347 .LASF18
     /tmp/cce5b6OA.s:2813   .debug_str:000000000000008e .LASF19
     /tmp/cce5b6OA.s:2883   .debug_str:00000000000002b1 .LASF20
     /tmp/cce5b6OA.s:2961   .debug_str:00000000000004f4 .LASF22
     /tmp/cce5b6OA.s:2853   .debug_str:00000000000001cc .LASF21
     /tmp/cce5b6OA.s:2923   .debug_str:00000000000003cc .LASF23
     /tmp/cce5b6OA.s:2977   .debug_str:0000000000000573 .LASF24
     /tmp/cce5b6OA.s:3037   .debug_str:00000000000007da .LASF25
     /tmp/cce5b6OA.s:2809   .debug_str:0000000000000079 .LASF26
     /tmp/cce5b6OA.s:2861   .debug_str:0000000000000214 .LASF27
     /tmp/cce5b6OA.s:2997   .debug_str:000000000000061a .LASF28
     /tmp/cce5b6OA.s:2789   .debug_str:0000000000000008 .LASF29
     /tmp/cce5b6OA.s:2793   .debug_str:0000000000000032 .LASF30
     /tmp/cce5b6OA.s:2995   .debug_str:0000000000000605 .LASF32
     /tmp/cce5b6OA.s:2859   .debug_str:000000000000020b .LASF34
     /tmp/cce5b6OA.s:2857   .debug_str:00000000000001f6 .LASF36
GAS LISTING /tmp/cce5b6OA.s 			page 23


     /tmp/cce5b6OA.s:2991   .debug_str:00000000000005ee .LASF31
     /tmp/cce5b6OA.s:2967   .debug_str:0000000000000531 .LASF33
     /tmp/cce5b6OA.s:3005   .debug_str:0000000000000653 .LASF35
     /tmp/cce5b6OA.s:3001   .debug_str:000000000000062e .LASF37
     /tmp/cce5b6OA.s:2873   .debug_str:000000000000026b .LASF38
     /tmp/cce5b6OA.s:2843   .debug_str:000000000000016c .LASF39
     /tmp/cce5b6OA.s:2787   .debug_str:0000000000000000 .LASF40
     /tmp/cce5b6OA.s:2881   .debug_str:000000000000029d .LASF41
     /tmp/cce5b6OA.s:2865   .debug_str:0000000000000237 .LASF42
     /tmp/cce5b6OA.s:2823   .debug_str:00000000000000da .LASF43
     /tmp/cce5b6OA.s:3041   .debug_str:00000000000007fd .LASF44
     /tmp/cce5b6OA.s:2867   .debug_str:000000000000023f .LASF45
     /tmp/cce5b6OA.s:2935   .debug_str:000000000000044a .LASF46
     /tmp/cce5b6OA.s:3031   .debug_str:00000000000007bd .LASF47
     /tmp/cce5b6OA.s:2807   .debug_str:0000000000000072 .LASF48
     /tmp/cce5b6OA.s:2871   .debug_str:0000000000000258 .LASF49
     /tmp/cce5b6OA.s:2875   .debug_str:0000000000000273 .LASF50
     /tmp/cce5b6OA.s:3003   .debug_str:0000000000000641 .LASF51
     /tmp/cce5b6OA.s:2803   .debug_str:0000000000000060 .LASF52
     /tmp/cce5b6OA.s:3047   .debug_str:0000000000000814 .LASF53
     /tmp/cce5b6OA.s:3039   .debug_str:00000000000007f2 .LASF54
     /tmp/cce5b6OA.s:2985   .debug_str:00000000000005b1 .LASF55
     /tmp/cce5b6OA.s:2897   .debug_str:0000000000000305 .LASF56
     /tmp/cce5b6OA.s:2911   .debug_str:0000000000000372 .LASF57
     /tmp/cce5b6OA.s:2829   .debug_str:0000000000000113 .LASF58
     /tmp/cce5b6OA.s:2885   .debug_str:00000000000002c2 .LASF59
     /tmp/cce5b6OA.s:2921   .debug_str:00000000000003c2 .LASF74
     /tmp/cce5b6OA.s:2879   .debug_str:0000000000000287 .LASF76
     /tmp/cce5b6OA.s:2819   .debug_str:00000000000000b5 .LASF78
     /tmp/cce5b6OA.s:2973   .debug_str:0000000000000551 .LASF60
     /tmp/cce5b6OA.s:2925   .debug_str:00000000000003ea .LASF61
     /tmp/cce5b6OA.s:3029   .debug_str:00000000000007b8 .LASF62
     /tmp/cce5b6OA.s:2913   .debug_str:000000000000038a .LASF64
     /tmp/cce5b6OA.s:2801   .debug_str:0000000000000056 .LASF123
     /tmp/cce5b6OA.s:2855   .debug_str:00000000000001dd .LASF68
     /tmp/cce5b6OA.s:2959   .debug_str:00000000000004ef .LASF65
     /tmp/cce5b6OA.s:2927   .debug_str:00000000000003ef .LASF66
     /tmp/cce5b6OA.s:2947   .debug_str:0000000000000481 .LASF67
     /tmp/cce5b6OA.s:2849   .debug_str:0000000000000199 .LASF69
     /tmp/cce5b6OA.s:2847   .debug_str:000000000000018f .LASF70
     /tmp/cce5b6OA.s:3023   .debug_str:000000000000077d .LASF71
     /tmp/cce5b6OA.s:3035   .debug_str:00000000000007d5 .LASF72
     /tmp/cce5b6OA.s:2975   .debug_str:0000000000000556 .LASF73
     /tmp/cce5b6OA.s:3045   .debug_str:000000000000080a .LASF75
     /tmp/cce5b6OA.s:2953   .debug_str:00000000000004a3 .LASF77
     /tmp/cce5b6OA.s:2799   .debug_str:000000000000004e .LASF79
     /tmp/cce5b6OA.s:3013   .debug_str:000000000000073a .LASF80
     /tmp/cce5b6OA.s:3021   .debug_str:0000000000000771 .LASF81
     /tmp/cce5b6OA.s:3027   .debug_str:00000000000007ab .LASF82
     /tmp/cce5b6OA.s:2805   .debug_str:0000000000000066 .LASF83
     /tmp/cce5b6OA.s:2993   .debug_str:00000000000005f5 .LASF84
     /tmp/cce5b6OA.s:3009   .debug_str:000000000000071e .LASF85
     /tmp/cce5b6OA.s:2957   .debug_str:00000000000004e4 .LASF124
     /tmp/cce5b6OA.s:2943   .debug_str:0000000000000465 .LASF125
     /tmp/cce5b6OA.s:2919   .debug_str:00000000000003b6 .LASF86
     /tmp/cce5b6OA.s:2979   .debug_str:000000000000057e .LASF87
     /tmp/cce5b6OA.s:3019   .debug_str:0000000000000761 .LASF88
GAS LISTING /tmp/cce5b6OA.s 			page 24


     /tmp/cce5b6OA.s:2929   .debug_str:000000000000040b .LASF89
     /tmp/cce5b6OA.s:2971   .debug_str:000000000000054c .LASF126
     /tmp/cce5b6OA.s:2983   .debug_str:00000000000005ab .LASF90
     /tmp/cce5b6OA.s:2965   .debug_str:0000000000000521 .LASF91
     /tmp/cce5b6OA.s:2863   .debug_str:000000000000022f .LASF127
     /tmp/cce5b6OA.s:2937   .debug_str:0000000000000451 .LASF92
     /tmp/cce5b6OA.s:2989   .debug_str:00000000000005db .LASF93
     /tmp/cce5b6OA.s:2907   .debug_str:0000000000000354 .LASF94
     /tmp/cce5b6OA.s:2821   .debug_str:00000000000000c1 .LASF95
     /tmp/cce5b6OA.s:2887   .debug_str:00000000000002d8 .LASF128
     /tmp/cce5b6OA.s:2895   .debug_str:0000000000000300 .LASF96
     /tmp/cce5b6OA.s:2939   .debug_str:000000000000045a .LASF97
     /tmp/cce5b6OA.s:2899   .debug_str:0000000000000310 .LASF98
     /tmp/cce5b6OA.s:2893   .debug_str:00000000000002f7 .LASF99
     /tmp/cce5b6OA.s:2837   .debug_str:000000000000013c .LASF100
     /tmp/cce5b6OA.s:2901   .debug_str:0000000000000318 .LASF101
     /tmp/cce5b6OA.s:2815   .debug_str:000000000000009a .LASF129
     /tmp/cce5b6OA.s:2869   .debug_str:0000000000000253 .LASF102
     /tmp/cce5b6OA.s:2833   .debug_str:0000000000000129 .LASF103
     /tmp/cce5b6OA.s:77     .text:000000000000002c .LFB39
     /tmp/cce5b6OA.s:584    .text:000000000000020c .LFE39
     /tmp/cce5b6OA.s:2795   .debug_str:000000000000003b .LASF104
     /tmp/cce5b6OA.s:2604   .debug_loc:0000000000000000 .LLST1
     /tmp/cce5b6OA.s:2773   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cce5b6OA.s:2903   .debug_str:0000000000000340 .LASF105
     /tmp/cce5b6OA.s:2619   .debug_loc:0000000000000049 .LLST2
     /tmp/cce5b6OA.s:300    .text:0000000000000128 .LBB88
     /tmp/cce5b6OA.s:358    .text:000000000000015c .LBE88
     /tmp/cce5b6OA.s:2835   .debug_str:0000000000000132 .LASF106
     /tmp/cce5b6OA.s:2642   .debug_loc:00000000000000b8 .LLST15
     /tmp/cce5b6OA.s:324    .text:0000000000000144 .LBB89
     /tmp/cce5b6OA.s:339    .text:0000000000000150 .LBE89
     /tmp/cce5b6OA.s:343    .text:0000000000000154 .LBB91
     /tmp/cce5b6OA.s:357    .text:000000000000015c .LBE91
     /tmp/cce5b6OA.s:2654   .debug_loc:00000000000000ef .LLST16
     /tmp/cce5b6OA.s:313    .text:0000000000000134 .LVL16
     /tmp/cce5b6OA.s:360    .text:000000000000015c .LBB80
     /tmp/cce5b6OA.s:418    .text:0000000000000190 .LBE80
     /tmp/cce5b6OA.s:2889   .debug_str:00000000000002e8 .LASF107
     /tmp/cce5b6OA.s:2661   .debug_loc:0000000000000112 .LLST13
     /tmp/cce5b6OA.s:384    .text:0000000000000178 .LBB81
     /tmp/cce5b6OA.s:399    .text:0000000000000184 .LBE81
     /tmp/cce5b6OA.s:403    .text:0000000000000188 .LBB83
     /tmp/cce5b6OA.s:417    .text:0000000000000190 .LBE83
     /tmp/cce5b6OA.s:2673   .debug_loc:0000000000000149 .LLST14
     /tmp/cce5b6OA.s:373    .text:0000000000000168 .LVL20
     /tmp/cce5b6OA.s:420    .text:0000000000000190 .LBB73
     /tmp/cce5b6OA.s:495    .text:00000000000001d0 .LBE73
     /tmp/cce5b6OA.s:2999   .debug_str:0000000000000627 .LASF108
     /tmp/cce5b6OA.s:2680   .debug_loc:000000000000016c .LLST10
     /tmp/cce5b6OA.s:2687   .debug_loc:000000000000018f .LLST11
     /tmp/cce5b6OA.s:2941   .debug_str:0000000000000460 .LASF112
     /tmp/cce5b6OA.s:461    .text:00000000000001b8 .LBB74
     /tmp/cce5b6OA.s:476    .text:00000000000001c4 .LBE74
     /tmp/cce5b6OA.s:480    .text:00000000000001c8 .LBB76
     /tmp/cce5b6OA.s:494    .text:00000000000001d0 .LBE76
     /tmp/cce5b6OA.s:2694   .debug_loc:00000000000001b2 .LLST12
GAS LISTING /tmp/cce5b6OA.s 			page 25


     /tmp/cce5b6OA.s:457    .text:00000000000001b4 .LVL27
     /tmp/cce5b6OA.s:497    .text:00000000000001d0 .LBB64
     /tmp/cce5b6OA.s:570    .text:0000000000000200 .LBE64
     /tmp/cce5b6OA.s:2945   .debug_str:000000000000047c .LASF109
     /tmp/cce5b6OA.s:2701   .debug_loc:00000000000001d5 .LLST6
     /tmp/cce5b6OA.s:2969   .debug_str:0000000000000544 .LASF110
     /tmp/cce5b6OA.s:2708   .debug_loc:00000000000001f8 .LLST7
     /tmp/cce5b6OA.s:499    .text:00000000000001d0 .LBB65
     /tmp/cce5b6OA.s:515    .text:00000000000001dc .LBE65
     /tmp/cce5b6OA.s:520    .text:00000000000001e0 .LBB67
     /tmp/cce5b6OA.s:536    .text:00000000000001ec .LBE67
     /tmp/cce5b6OA.s:542    .text:00000000000001f4 .LBB69
     /tmp/cce5b6OA.s:553    .text:00000000000001f8 .LBE69
     /tmp/cce5b6OA.s:2715   .debug_loc:000000000000021b .LLST8
     /tmp/cce5b6OA.s:555    .text:00000000000001f8 .LBB71
     /tmp/cce5b6OA.s:569    .text:0000000000000200 .LBE71
     /tmp/cce5b6OA.s:2722   .debug_loc:000000000000023e .LLST9
     /tmp/cce5b6OA.s:540    .text:00000000000001f4 .LVL33
     /tmp/cce5b6OA.s:248    .text:0000000000000100 .LBB58
     /tmp/cce5b6OA.s:257    .text:0000000000000108 .LBE58
     /tmp/cce5b6OA.s:2729   .debug_loc:0000000000000261 .LLST3
     /tmp/cce5b6OA.s:2737   .debug_loc:0000000000000285 .LLST4
     /tmp/cce5b6OA.s:263    .text:0000000000000110 .LBB60
     /tmp/cce5b6OA.s:278    .text:000000000000011c .LBE60
     /tmp/cce5b6OA.s:282    .text:0000000000000120 .LBB62
     /tmp/cce5b6OA.s:296    .text:0000000000000128 .LBE62
     /tmp/cce5b6OA.s:2744   .debug_loc:00000000000002a8 .LLST5
     /tmp/cce5b6OA.s:261    .text:0000000000000110 .LVL12
     /tmp/cce5b6OA.s:93     .text:0000000000000044 .LBB47
     /tmp/cce5b6OA.s:109    .text:0000000000000050 .LBE47
     /tmp/cce5b6OA.s:136    .text:000000000000008c .LBB51
     /tmp/cce5b6OA.s:151    .text:0000000000000098 .LBE51
     /tmp/cce5b6OA.s:134    .text:000000000000008c .LVL3
     /tmp/cce5b6OA.s:154    .text:00000000000000a0 .LVL4
     /tmp/cce5b6OA.s:159    .text:00000000000000b0 .LVL5
     /tmp/cce5b6OA.s:579    .text:0000000000000208 .LVL36
     /tmp/cce5b6OA.s:10     .text:0000000000000000 .LFB38
     /tmp/cce5b6OA.s:63     .text:000000000000002c .LFE38
     /tmp/cce5b6OA.s:34     .text:0000000000000014 .LBB45
     /tmp/cce5b6OA.s:47     .text:000000000000001c .LBE45
     /tmp/cce5b6OA.s:2751   .debug_loc:00000000000002cb .LLST0
     /tmp/cce5b6OA.s:3033   .debug_str:00000000000007d0 .LASF130
     /tmp/cce5b6OA.s:2825   .debug_str:00000000000000ee .LASF111
     /tmp/cce5b6OA.s:3043   .debug_str:0000000000000805 .LASF113
     /tmp/cce5b6OA.s:2851   .debug_str:00000000000001b9 .LASF114
     /tmp/cce5b6OA.s:2797   .debug_str:0000000000000042 .LASF116
     /tmp/cce5b6OA.s:3015   .debug_str:000000000000073f .LASF115
     /tmp/cce5b6OA.s:3025   .debug_str:000000000000079e .LASF117
     /tmp/cce5b6OA.s:2909   .debug_str:0000000000000362 .LASF118
     /tmp/cce5b6OA.s:107    .text:0000000000000050 .LVL2
     /tmp/cce5b6OA.s:177    .text:00000000000000c8 .LVL6
     /tmp/cce5b6OA.s:195    .text:00000000000000d0 .LVL8
     /tmp/cce5b6OA.s:566    .text:0000000000000200 .LVL35
     /tmp/cce5b6OA.s:190    .text:00000000000000cc .LVL7
     /tmp/cce5b6OA.s:245    .text:00000000000000fc .LVL9
     /tmp/cce5b6OA.s:293    .text:0000000000000128 .LVL14
     /tmp/cce5b6OA.s:354    .text:000000000000015c .LVL18
GAS LISTING /tmp/cce5b6OA.s 			page 26


     /tmp/cce5b6OA.s:414    .text:0000000000000190 .LVL22
     /tmp/cce5b6OA.s:441    .text:00000000000001a0 .LVL25
     /tmp/cce5b6OA.s:491    .text:00000000000001d0 .LVL29
     /tmp/cce5b6OA.s:508    .text:00000000000001d4 .LVL30
     /tmp/cce5b6OA.s:308    .text:000000000000012c .LVL15
     /tmp/cce5b6OA.s:342    .text:0000000000000154 .LVL17
     /tmp/cce5b6OA.s:368    .text:0000000000000160 .LVL19
     /tmp/cce5b6OA.s:402    .text:0000000000000188 .LVL21
     /tmp/cce5b6OA.s:430    .text:0000000000000194 .LVL23
     /tmp/cce5b6OA.s:436    .text:0000000000000198 .LVL24
     /tmp/cce5b6OA.s:479    .text:00000000000001c8 .LVL28
     /tmp/cce5b6OA.s:518    .text:00000000000001e0 .LVL31
     /tmp/cce5b6OA.s:534    .text:00000000000001ec .LVL32
     /tmp/cce5b6OA.s:550    .text:00000000000001f8 .LVL34
     /tmp/cce5b6OA.s:247    .text:0000000000000100 .LVL10
     /tmp/cce5b6OA.s:255    .text:0000000000000108 .LVL11
     /tmp/cce5b6OA.s:281    .text:0000000000000120 .LVL13
     /tmp/cce5b6OA.s:32     .text:0000000000000014 .LVL0
     /tmp/cce5b6OA.s:44     .text:000000000000001c .LVL1
     /tmp/cce5b6OA.s:592    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cce5b6OA.s:182    .text:00000000000000c8 .LBB53
     /tmp/cce5b6OA.s:198    .text:00000000000000d4 .LBE53
     /tmp/cce5b6OA.s:204    .text:00000000000000d4 .LBB97
     /tmp/cce5b6OA.s:211    .text:00000000000000dc .LBE97
     /tmp/cce5b6OA.s:217    .text:00000000000000dc .LBB98
     /tmp/cce5b6OA.s:226    .text:00000000000000e4 .LBE98
     /tmp/cce5b6OA.s:232    .text:00000000000000e4 .LBB99
     /tmp/cce5b6OA.s:575    .text:0000000000000200 .LBE99

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z12printIntegerm
_ZN3CCB7runningE
_ZN3CCB5yieldEv
_ZN15MemoryAllocator8allocateEm
backupSP
_ZN15MemoryAllocator4freeEPv
_ZN3CCB15createCoroutineEPFvvE
_ZN3CCB8dispatchEv
console_handler
