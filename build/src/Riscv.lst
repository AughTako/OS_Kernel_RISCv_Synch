GAS LISTING /tmp/cc69O5m9.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB54:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   2:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   3:src/Riscv.cpp **** #include "../h/tcb.hpp"
   4:src/Riscv.cpp **** #include "../h/printing.hpp"
   5:src/Riscv.cpp **** #include "../lib/console.h"
   6:src/Riscv.cpp **** #include "../h/tcb.hpp"
   7:src/Riscv.cpp **** #include "../h/Semaphore.hpp"
   8:src/Riscv.cpp **** 
   9:src/Riscv.cpp **** #define ECALL_USER 0x0000000000000008UL
  10:src/Riscv.cpp **** #define ECALL_SUPERVISOR 0x0000000000000009UL
  11:src/Riscv.cpp **** #define INTR_TIMER 0x8000000000000001UL
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp **** #define MEM_ALLOC 0x01
  14:src/Riscv.cpp **** #define MEM_FREE 0x02
  15:src/Riscv.cpp **** #define THREAD_CREATE 0x11
  16:src/Riscv.cpp **** #define THREAD_EXIT 0x12
  17:src/Riscv.cpp **** #define THREAD_DISPATCH 0x13
  18:src/Riscv.cpp **** #define SEM_OPEN 0x21
  19:src/Riscv.cpp **** #define SEM_CLOSE 0x22
  20:src/Riscv.cpp **** #define SEM_WAIT 0x23
  21:src/Riscv.cpp **** #define SEM_SIGNAL 0x24
  22:src/Riscv.cpp **** #define THREAD_CREATE_NOSTART 0x14
  23:src/Riscv.cpp **** 
  24:src/Riscv.cpp **** extern uint64 backupSP;
  25:src/Riscv.cpp **** 
  26:src/Riscv.cpp **** 
  27:src/Riscv.cpp **** void Riscv::popSppSpie()
  28:src/Riscv.cpp **** {
  12              		.loc 1 28 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  29:src/Riscv.cpp ****     ms_sstatus(SSTATUS_SPP);
  20              		.loc 1 29 5
  21              	.LVL0:
  22              	.LBB82:
  23              	.LBB83:
  24              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 6/22/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef OS_PROJECT_RISCV_HPP
GAS LISTING /tmp/cc69O5m9.s 			page 2


   6:src/../h/Riscv.hpp **** #define OS_PROJECT_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** class Riscv
  11:src/../h/Riscv.hpp **** {
  12:src/../h/Riscv.hpp **** public:
  13:src/../h/Riscv.hpp ****     static void interruptRoutine();
  14:src/../h/Riscv.hpp ****     static void interruptHandler();
  15:src/../h/Riscv.hpp **** 
  16:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  17:src/../h/Riscv.hpp ****     static void popSppSpie();
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp ****     // push x3..x31 registers onto stack
  20:src/../h/Riscv.hpp ****     static void pushRegisters();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp ****     // pop x3..x31 registers onto stack
  23:src/../h/Riscv.hpp ****     static void popRegisters();
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp ****     // read register scause
  26:src/../h/Riscv.hpp ****     static uint64 r_scause();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp ****     // write register scause
  29:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp ****     // read register sepc
  32:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp ****     // write register sepc
  35:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp ****     // read register stvec
  38:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  39:src/../h/Riscv.hpp **** 
  40:src/../h/Riscv.hpp ****     // write register stvec
  41:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp ****     // read register stval
  44:src/../h/Riscv.hpp ****     static uint64 r_stval();
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp ****     // write register stval
  47:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     enum BitMaskSip
  50:src/../h/Riscv.hpp ****     {
  51:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  52:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  53:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  54:src/../h/Riscv.hpp ****     };
  55:src/../h/Riscv.hpp **** 
  56:src/../h/Riscv.hpp ****     // mask set register sip
  57:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  58:src/../h/Riscv.hpp **** 
  59:src/../h/Riscv.hpp ****     // mask clear register sip
  60:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  61:src/../h/Riscv.hpp **** 
  62:src/../h/Riscv.hpp ****     // read register sip
GAS LISTING /tmp/cc69O5m9.s 			page 3


  63:src/../h/Riscv.hpp ****     static uint64 r_sip();
  64:src/../h/Riscv.hpp **** 
  65:src/../h/Riscv.hpp ****     // write register sip
  66:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  69:src/../h/Riscv.hpp ****     {
  70:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  71:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  72:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  73:src/../h/Riscv.hpp ****     };
  74:src/../h/Riscv.hpp **** 
  75:src/../h/Riscv.hpp ****     // mask set register sstatus
  76:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp ****     // mask clear register sstatus
  79:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  80:src/../h/Riscv.hpp **** 
  81:src/../h/Riscv.hpp ****     // read register sstatus
  82:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  83:src/../h/Riscv.hpp **** 
  84:src/../h/Riscv.hpp ****     // write register sstatus
  85:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  86:src/../h/Riscv.hpp **** 
  87:src/../h/Riscv.hpp ****     // supervisor trap
  88:src/../h/Riscv.hpp ****     //static void supervisorTrap();
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** private:
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp ****     // supervisor trap handler
  93:src/../h/Riscv.hpp ****     //static void handleSupervisorTrap();
  94:src/../h/Riscv.hpp **** 
  95:src/../h/Riscv.hpp **** };
  96:src/../h/Riscv.hpp **** 
  97:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  98:src/../h/Riscv.hpp **** {
  99:src/../h/Riscv.hpp ****     uint64 volatile scause;
 100:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 101:src/../h/Riscv.hpp ****     return scause;
 102:src/../h/Riscv.hpp **** }
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 105:src/../h/Riscv.hpp **** {
 106:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 107:src/../h/Riscv.hpp **** }
 108:src/../h/Riscv.hpp **** 
 109:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 110:src/../h/Riscv.hpp **** {
 111:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 112:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 113:src/../h/Riscv.hpp ****     return sepc;
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 117:src/../h/Riscv.hpp **** {
 118:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 119:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/cc69O5m9.s 			page 4


 120:src/../h/Riscv.hpp **** 
 121:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 122:src/../h/Riscv.hpp **** {
 123:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 124:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 125:src/../h/Riscv.hpp ****     return stvec;
 126:src/../h/Riscv.hpp **** }
 127:src/../h/Riscv.hpp **** 
 128:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 129:src/../h/Riscv.hpp **** {
 130:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 131:src/../h/Riscv.hpp **** }
 132:src/../h/Riscv.hpp **** 
 133:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 134:src/../h/Riscv.hpp **** {
 135:src/../h/Riscv.hpp ****     uint64 volatile stval;
 136:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 137:src/../h/Riscv.hpp ****     return stval;
 138:src/../h/Riscv.hpp **** }
 139:src/../h/Riscv.hpp **** 
 140:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 141:src/../h/Riscv.hpp **** {
 142:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 143:src/../h/Riscv.hpp **** }
 144:src/../h/Riscv.hpp **** 
 145:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 146:src/../h/Riscv.hpp **** {
 147:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 148:src/../h/Riscv.hpp **** }
 149:src/../h/Riscv.hpp **** 
 150:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 151:src/../h/Riscv.hpp **** {
 152:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 153:src/../h/Riscv.hpp **** }
 154:src/../h/Riscv.hpp **** 
 155:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 156:src/../h/Riscv.hpp **** {
 157:src/../h/Riscv.hpp ****     uint64 volatile sip;
 158:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 159:src/../h/Riscv.hpp ****     return sip;
 160:src/../h/Riscv.hpp **** }
 161:src/../h/Riscv.hpp **** 
 162:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 163:src/../h/Riscv.hpp **** {
 164:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 165:src/../h/Riscv.hpp **** }
 166:src/../h/Riscv.hpp **** 
 167:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 168:src/../h/Riscv.hpp **** {
 169:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
  25              		.loc 2 169 5
  26              		.loc 2 169 68 is_stmt 0
  27 000c 93070010 		li	a5,256
  28              	#APP
  29              	# 169 "src/../h/Riscv.hpp" 1
 170              	}
  30              		csrs sstatus, a5
GAS LISTING /tmp/cc69O5m9.s 			page 5


  31              	# 0 "" 2
  32              	.LVL1:
  33              	#NO_APP
  34              	.LBE83:
  35              	.LBE82:
  30:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  36              		.loc 1 30 5 is_stmt 1
  37              		.loc 1 30 39 is_stmt 0
  38              	#APP
  39              	# 30 "src/Riscv.cpp" 1
  31              	    __asm__ volatile ("csrc sip, 0x02");
  40              		csrw sepc, ra
  41              	# 0 "" 2
  42              		.loc 1 31 5 is_stmt 1
  43              		.loc 1 31 40 is_stmt 0
  44              	# 31 "src/Riscv.cpp" 1
  32              	    __asm__ volatile ("sret");
  45              		csrc sip, 0x02
  46              	# 0 "" 2
  47              		.loc 1 32 5 is_stmt 1
  48              		.loc 1 32 30 is_stmt 0
  49              	# 32 "src/Riscv.cpp" 1
  33              	}
  50              		sret
  51              	# 0 "" 2
  52              		.loc 1 33 1
  53              	#NO_APP
  54 0020 03348100 		ld	s0,8(sp)
  55              		.cfi_restore 8
  56              		.cfi_def_cfa 2, 16
  57 0024 13010101 		addi	sp,sp,16
  58              		.cfi_def_cfa_offset 0
  59 0028 67800000 		jr	ra
  60              		.cfi_endproc
  61              	.LFE54:
  63              		.align	2
  64              		.globl	_ZN5Riscv16interruptHandlerEv
  66              	_ZN5Riscv16interruptHandlerEv:
  67              	.LFB55:
  34:src/Riscv.cpp **** 
  35:src/Riscv.cpp **** void Riscv::interruptHandler() {
  68              		.loc 1 35 32 is_stmt 1
  69              		.cfi_startproc
  70 002c 130101F7 		addi	sp,sp,-144
  71              		.cfi_def_cfa_offset 144
  72 0030 23341108 		sd	ra,136(sp)
  73 0034 23308108 		sd	s0,128(sp)
  74 0038 233C9106 		sd	s1,120(sp)
  75 003c 23382107 		sd	s2,112(sp)
  76              		.cfi_offset 1, -8
  77              		.cfi_offset 8, -16
  78              		.cfi_offset 9, -24
  79              		.cfi_offset 18, -32
  80 0040 13040109 		addi	s0,sp,144
  81              		.cfi_def_cfa 8, 0
  36:src/Riscv.cpp ****     uint64 scause = Riscv::r_scause();
  82              		.loc 1 36 5
GAS LISTING /tmp/cc69O5m9.s 			page 6


  83              	.LBB84:
  84              	.LBB85:
  99:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  85              		.loc 2 99 5
 100:src/../h/Riscv.hpp ****     return scause;
  86              		.loc 2 100 5
 100:src/../h/Riscv.hpp ****     return scause;
  87              		.loc 2 100 72 is_stmt 0
  88              	#APP
  89              	# 100 "src/../h/Riscv.hpp" 1
  90              		csrr a5, scause
  91              	# 0 "" 2
  92              	#NO_APP
  93 0048 233CF4F6 		sd	a5,-136(s0)
 101:src/../h/Riscv.hpp **** }
  94              		.loc 2 101 5 is_stmt 1
 101:src/../h/Riscv.hpp **** }
  95              		.loc 2 101 12 is_stmt 0
  96 004c 033784F7 		ld	a4,-136(s0)
  97              	.LVL2:
  98              	.LBE85:
  99              	.LBE84:
  37:src/Riscv.cpp ****     if (scause == INTR_TIMER)
 100              		.loc 1 37 5 is_stmt 1
 101              	.LBB86:
 102 0050 9307F0FF 		li	a5,-1
 103 0054 9397F703 		slli	a5,a5,63
 104 0058 93871700 		addi	a5,a5,1
 105 005c 6306F702 		beq	a4,a5,.L18
 106              	.LBE86:
  38:src/Riscv.cpp ****     {
  39:src/Riscv.cpp ****         //__putc('T');
  40:src/Riscv.cpp ****         // ccb::timeSliceCounter++;
  41:src/Riscv.cpp ****         // if (ccb::timeSliceCounter >= ccb::running->getTimeSlice())
  42:src/Riscv.cpp ****         // {
  43:src/Riscv.cpp ****         //     uint64 sepc = r_sepc();
  44:src/Riscv.cpp ****         //     uint64 sstatus = r_sstatus();
  45:src/Riscv.cpp ****         //     ccb::timeSliceCounter = 0;
  46:src/Riscv.cpp ****         //     ccb::dispatch();
  47:src/Riscv.cpp ****         //     w_sstatus(sstatus);
  48:src/Riscv.cpp ****         //     w_sepc(sepc);
  49:src/Riscv.cpp ****         // }
  50:src/Riscv.cpp ****         mc_sip(SIP_SSIP);
  51:src/Riscv.cpp ****     }
  52:src/Riscv.cpp ****     else if(scause == ECALL_USER || scause == ECALL_SUPERVISOR){
 107              		.loc 1 52 10
 108              	.LBB234:
 109              	.LBB87:
 110              		.loc 1 52 34 is_stmt 0
 111 0060 930787FF 		addi	a5,a4,-8
 112              		.loc 1 52 10
 113 0064 93061000 		li	a3,1
 114 0068 63F4F604 		bleu	a5,a3,.L19
  53:src/Riscv.cpp ****         uint64 intrId;
  54:src/Riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (intrId));
  55:src/Riscv.cpp ****         if(intrId == MEM_ALLOC){
  56:src/Riscv.cpp ****             uint64 numBlocks = 0;
GAS LISTING /tmp/cc69O5m9.s 			page 7


  57:src/Riscv.cpp ****             asm ("mv %0, a1" : "=r" (numBlocks));
  58:src/Riscv.cpp ****             MemoryAllocator::allocate(numBlocks);
  59:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
  60:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
  61:src/Riscv.cpp ****         }
  62:src/Riscv.cpp ****         else if(intrId == MEM_FREE){
  63:src/Riscv.cpp ****             void* address = nullptr;
  64:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (address));
  65:src/Riscv.cpp ****             MemoryAllocator::free(address);
  66:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
  67:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
  68:src/Riscv.cpp ****         }
  69:src/Riscv.cpp ****         else if(intrId == THREAD_CREATE_NOSTART){
  70:src/Riscv.cpp ****             CCB** handle;
  71:src/Riscv.cpp ****             CCB::Body body;
  72:src/Riscv.cpp ****             void* args;
  73:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
  74:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (body));
  75:src/Riscv.cpp ****             __asm__ volatile ("ld a3, 0x68(%0)" : : "r" (backupSP));
  76:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a3" : "=r" (args));
  77:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body, args);
  78:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
  79:src/Riscv.cpp ****         }
  80:src/Riscv.cpp ****         else if(intrId == THREAD_CREATE){
  81:src/Riscv.cpp ****             CCB** handle;
  82:src/Riscv.cpp ****             CCB::Body body;
  83:src/Riscv.cpp ****             void* args;
  84:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
  85:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (body));
  86:src/Riscv.cpp ****             __asm__ volatile ("ld a3, 0x68(%0)" : : "r" (backupSP));
  87:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a3" : "=r" (args));
  88:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body, args);
  89:src/Riscv.cpp ****             Scheduler::put(*handle);
  90:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
  91:src/Riscv.cpp ****         }
  92:src/Riscv.cpp ****         else if(intrId == THREAD_DISPATCH) {
  93:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
  94:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
  95:src/Riscv.cpp ****             CCB::dispatch();
  96:src/Riscv.cpp ****             w_sstatus(sstatus);
  97:src/Riscv.cpp ****             w_sepc(sepc);
  98:src/Riscv.cpp ****         }
  99:src/Riscv.cpp ****         else if(intrId == THREAD_EXIT){
 100:src/Riscv.cpp ****             CCB::running->setFinished(true);
 101:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 102:src/Riscv.cpp ****         }
 103:src/Riscv.cpp ****         else if(intrId == SEM_OPEN) {
 104:src/Riscv.cpp ****             Semaphore_sys **handle;
 105:src/Riscv.cpp ****             unsigned init;
 106:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 107:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (init));
 108:src/Riscv.cpp ****             *handle = Semaphore_sys::createSemaphore(init);
 109:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 110:src/Riscv.cpp ****         }
 111:src/Riscv.cpp ****         else if(intrId == SEM_CLOSE) {
 112:src/Riscv.cpp ****             Semaphore_sys *handle;
 113:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
GAS LISTING /tmp/cc69O5m9.s 			page 8


 114:src/Riscv.cpp ****             delete handle;
 115:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 116:src/Riscv.cpp ****         }
 117:src/Riscv.cpp ****         else if(intrId == SEM_SIGNAL) {
 118:src/Riscv.cpp ****             Semaphore_sys *handle;
 119:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 120:src/Riscv.cpp ****             handle->signal();
 121:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 122:src/Riscv.cpp ****         }
 123:src/Riscv.cpp ****         else if(intrId == SEM_WAIT) {
 124:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 125:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 126:src/Riscv.cpp ****             Semaphore_sys *handle;
 127:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 128:src/Riscv.cpp ****             handle->wait();
 129:src/Riscv.cpp ****             w_sepc(sepc);
 130:src/Riscv.cpp ****             w_sstatus(sstatus);
 131:src/Riscv.cpp ****         }
 132:src/Riscv.cpp **** 
 133:src/Riscv.cpp ****     }
 134:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL) {
 115              		.loc 1 134 10 is_stmt 1
 116 006c 9307F0FF 		li	a5,-1
 117 0070 9397F703 		slli	a5,a5,63
 118 0074 93879700 		addi	a5,a5,9
 119 0078 631CF700 		bne	a4,a5,.L5
 135:src/Riscv.cpp ****         console_handler();
 120              		.loc 1 135 9
 121              		.loc 1 135 24 is_stmt 0
 122 007c 97000000 		call	console_handler@plt
 122      E7800000 
 123              	.LVL3:
 124 0084 6F00C000 		j	.L5
 125              	.LVL4:
 126              	.L18:
 127              	.LBE87:
  50:src/Riscv.cpp ****     }
 128              		.loc 1 50 9 is_stmt 1
 129              	.LBB222:
 130              	.LBB223:
 152:src/../h/Riscv.hpp **** }
 131              		.loc 2 152 5
 152:src/../h/Riscv.hpp **** }
 132              		.loc 2 152 64 is_stmt 0
 133 0088 93072000 		li	a5,2
 134              	#APP
 135              	# 152 "src/../h/Riscv.hpp" 1
 136              		csrc sip, a5
 137              	# 0 "" 2
 138              	.LVL5:
 139              	#NO_APP
 140              	.L5:
 141              	.LBE223:
 142              	.LBE222:
 143              	.LBE234:
 136:src/Riscv.cpp ****     }
 137:src/Riscv.cpp ****     //else {
GAS LISTING /tmp/cc69O5m9.s 			page 9


 138:src/Riscv.cpp ****     //    printString("Error ");
 139:src/Riscv.cpp ****     //    printInteger(r_scause());
 140:src/Riscv.cpp ****     //    printString("\n");
 141:src/Riscv.cpp ****     //}
 142:src/Riscv.cpp ****     console_handler();
 144              		.loc 1 142 5 is_stmt 1
 145              		.loc 1 142 20 is_stmt 0
 146 0090 97000000 		call	console_handler@plt
 146      E7800000 
 147              	.LVL6:
 143:src/Riscv.cpp **** }...
 148              		.loc 1 143 1
 149 0098 83308108 		ld	ra,136(sp)
 150              		.cfi_remember_state
 151              		.cfi_restore 1
 152 009c 03340108 		ld	s0,128(sp)
 153              		.cfi_restore 8
 154              		.cfi_def_cfa 2, 144
 155 00a0 83348107 		ld	s1,120(sp)
 156              		.cfi_restore 9
 157 00a4 03390107 		ld	s2,112(sp)
 158              		.cfi_restore 18
 159 00a8 13010109 		addi	sp,sp,144
 160              		.cfi_def_cfa_offset 0
 161 00ac 67800000 		jr	ra
 162              	.LVL7:
 163              	.L19:
 164              		.cfi_restore_state
 165              	.LBB235:
 166              	.LBB224:
 167              	.LBB88:
  53:src/Riscv.cpp ****         uint64 intrId;
 168              		.loc 1 53 9 is_stmt 1
  54:src/Riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (intrId));
 169              		.loc 1 54 9
  54:src/Riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (intrId));
 170              		.loc 1 54 54 is_stmt 0
 171              	#APP
 172              	# 54 "src/Riscv.cpp" 1
 173              		mv a5, a0
 174              	# 0 "" 2
 175              	.LVL8:
  55:src/Riscv.cpp ****         if(intrId == MEM_ALLOC){
 176              		.loc 1 55 9 is_stmt 1
 177              	#NO_APP
 178              	.LBB89:
 179 00b4 13071000 		li	a4,1
 180              	.LVL9:
 181 00b8 6380E708 		beq	a5,a4,.L20
 182              	.LBE89:
 183              	.LBE88:
 184              	.LBE224:
 185              	.LBE235:
  62:src/Riscv.cpp ****         else if(intrId == MEM_FREE){
 186              		.loc 1 62 14
 187              	.LBB236:
 188              	.LBB225:
GAS LISTING /tmp/cc69O5m9.s 			page 10


 189              	.LBB213:
 190              	.LBB204:
 191              	.LBB90:
 192 00bc 13072000 		li	a4,2
 193 00c0 6386E70A 		beq	a5,a4,.L21
 194              	.LBE90:
 195              	.LBE204:
 196              	.LBE213:
 197              	.LBE225:
 198              	.LBE236:
  69:src/Riscv.cpp ****         else if(intrId == THREAD_CREATE_NOSTART){
 199              		.loc 1 69 14
 200              	.LBB237:
 201              	.LBB226:
 202              	.LBB214:
 203              	.LBB205:
 204              	.LBB190:
 205              	.LBB91:
 206 00c4 13074001 		li	a4,20
 207 00c8 638CE70C 		beq	a5,a4,.L22
 208              	.LBE91:
 209              	.LBE190:
 210              	.LBE205:
 211              	.LBE214:
 212              	.LBE226:
 213              	.LBE237:
  80:src/Riscv.cpp ****         else if(intrId == THREAD_CREATE){
 214              		.loc 1 80 14
 215              	.LBB238:
 216              	.LBB227:
 217              	.LBB215:
 218              	.LBB206:
 219              	.LBB191:
 220              	.LBB177:
 221              	.LBB92:
 222 00cc 13071001 		li	a4,17
 223 00d0 6388E710 		beq	a5,a4,.L23
 224              	.LBE92:
 225              	.LBE177:
 226              	.LBE191:
 227              	.LBE206:
 228              	.LBE215:
 229              	.LBE227:
 230              	.LBE238:
  92:src/Riscv.cpp ****         else if(intrId == THREAD_DISPATCH) {
 231              		.loc 1 92 14
 232              	.LBB239:
 233              	.LBB228:
 234              	.LBB216:
 235              	.LBB207:
 236              	.LBB192:
 237              	.LBB178:
 238              	.LBB165:
 239              	.LBB93:
 240 00d4 13073001 		li	a4,19
 241 00d8 6388E714 		beq	a5,a4,.L24
 242              	.LBE93:
GAS LISTING /tmp/cc69O5m9.s 			page 11


 243              	.LBE165:
 244              	.LBE178:
 245              	.LBE192:
 246              	.LBE207:
 247              	.LBE216:
 248              	.LBE228:
 249              	.LBE239:
  99:src/Riscv.cpp ****         else if(intrId == THREAD_EXIT){
 250              		.loc 1 99 14
 251              	.LBB240:
 252              	.LBB229:
 253              	.LBB217:
 254              	.LBB208:
 255              	.LBB193:
 256              	.LBB179:
 257              	.LBB166:
 258              	.LBB154:
 259              	.LBB94:
 260 00dc 13072001 		li	a4,18
 261 00e0 638CE716 		beq	a5,a4,.L25
 262              	.LBE94:
 263              	.LBE154:
 264              	.LBE166:
 265              	.LBE179:
 266              	.LBE193:
 267              	.LBE208:
 268              	.LBE217:
 269              	.LBE229:
 270              	.LBE240:
 103:src/Riscv.cpp ****         else if(intrId == SEM_OPEN) {
 271              		.loc 1 103 14
 272              	.LBB241:
 273              	.LBB230:
 274              	.LBB218:
 275              	.LBB209:
 276              	.LBB194:
 277              	.LBB180:
 278              	.LBB167:
 279              	.LBB155:
 280              	.LBB140:
 281              	.LBB95:
 282 00e4 13071002 		li	a4,33
 283 00e8 638EE718 		beq	a5,a4,.L26
 284              	.LBE95:
 285              	.LBE140:
 286              	.LBE155:
 287              	.LBE167:
 288              	.LBE180:
 289              	.LBE194:
 290              	.LBE209:
 291              	.LBE218:
 292              	.LBE230:
 293              	.LBE241:
 111:src/Riscv.cpp ****         else if(intrId == SEM_CLOSE) {
 294              		.loc 1 111 14
 295              	.LBB242:
 296              	.LBB231:
GAS LISTING /tmp/cc69O5m9.s 			page 12


 297              	.LBB219:
 298              	.LBB210:
 299              	.LBB195:
 300              	.LBB181:
 301              	.LBB168:
 302              	.LBB156:
 303              	.LBB141:
 304              	.LBB130:
 305              	.LBB96:
 306 00ec 13072002 		li	a4,34
 307 00f0 6382E71C 		beq	a5,a4,.L27
 308              	.LBE96:
 309              	.LBE130:
 310              	.LBE141:
 311              	.LBE156:
 312              	.LBE168:
 313              	.LBE181:
 314              	.LBE195:
 315              	.LBE210:
 316              	.LBE219:
 317              	.LBE231:
 318              	.LBE242:
 117:src/Riscv.cpp ****         else if(intrId == SEM_SIGNAL) {
 319              		.loc 1 117 14
 320              	.LBB243:
 321              	.LBB232:
 322              	.LBB220:
 323              	.LBB211:
 324              	.LBB196:
 325              	.LBB182:
 326              	.LBB169:
 327              	.LBB157:
 328              	.LBB142:
 329              	.LBB131:
 330              	.LBB122:
 331              	.LBB97:
 332 00f4 13074002 		li	a4,36
 333 00f8 6382E71E 		beq	a5,a4,.L28
 334              	.LBE97:
 335              	.LBE122:
 336              	.LBE131:
 337              	.LBE142:
 338              	.LBE157:
 339              	.LBE169:
 340              	.LBE182:
 341              	.LBE196:
 342              	.LBE211:
 343              	.LBE220:
 344              	.LBE232:
 345              	.LBE243:
 123:src/Riscv.cpp ****         else if(intrId == SEM_WAIT) {
 346              		.loc 1 123 14
 347              	.LBB244:
 348              	.LBB233:
 349              	.LBB221:
 350              	.LBB212:
 351              	.LBB197:
GAS LISTING /tmp/cc69O5m9.s 			page 13


 352              	.LBB183:
 353              	.LBB170:
 354              	.LBB158:
 355              	.LBB143:
 356              	.LBB132:
 357              	.LBB123:
 358              	.LBB113:
 359              	.LBB98:
 360 00fc 13073002 		li	a4,35
 361 0100 E398E7F8 		bne	a5,a4,.L5
 362              	.LBB99:
 124:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 363              		.loc 1 124 13
 364              	.LBB100:
 365              	.LBB101:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 366              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 367              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 368              		.loc 2 112 64 is_stmt 0
 369              	#APP
 370              	# 112 "src/../h/Riscv.hpp" 1
 371              		csrr a5, sepc
 372              	# 0 "" 2
 373              	.LVL10:
 374              	#NO_APP
 375 0108 233CF4FC 		sd	a5,-40(s0)
 113:src/../h/Riscv.hpp **** }
 376              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 377              		.loc 2 113 12 is_stmt 0
 378 010c 833484FD 		ld	s1,-40(s0)
 379              	.LBE101:
 380              	.LBE100:
 124:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 381              		.loc 1 124 38
 382 0110 93844400 		addi	s1,s1,4
 383              	.LVL11:
 125:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 384              		.loc 1 125 13 is_stmt 1
 385              	.LBB102:
 386              	.LBB103:
 171:src/../h/Riscv.hpp **** 
 172:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 173:src/../h/Riscv.hpp **** {
 174:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 175:src/../h/Riscv.hpp **** }
 176:src/../h/Riscv.hpp **** 
 177:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus()
 178:src/../h/Riscv.hpp **** {
 179:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 387              		.loc 2 179 5
 180:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 388              		.loc 2 180 5
 389              		.loc 2 180 76 is_stmt 0
 390              	#APP
GAS LISTING /tmp/cc69O5m9.s 			page 14


 391              	# 180 "src/../h/Riscv.hpp" 1
 181              	    return sstatus;
 392              		csrr a5, sstatus
 393              	# 0 "" 2
 394              	#NO_APP
 395 0118 2338F4FC 		sd	a5,-48(s0)
 396              		.loc 2 181 5 is_stmt 1
 397              		.loc 2 181 12 is_stmt 0
 398 011c 033904FD 		ld	s2,-48(s0)
 399              	.LVL12:
 400              	.LBE103:
 401              	.LBE102:
 126:src/Riscv.cpp ****             Semaphore_sys *handle;
 402              		.loc 1 126 13 is_stmt 1
 127:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 403              		.loc 1 127 13
 127:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 404              		.loc 1 127 59 is_stmt 0
 405              	#APP
 406              	# 127 "src/Riscv.cpp" 1
 407              		mv a0, a1
 408              	# 0 "" 2
 409              	.LVL13:
 128:src/Riscv.cpp ****             handle->wait();
 410              		.loc 1 128 13 is_stmt 1
 128:src/Riscv.cpp ****             handle->wait();
 411              		.loc 1 128 25 is_stmt 0
 412              	#NO_APP
 413 0124 97000000 		call	_ZN13Semaphore_sys4waitEv@plt
 413      E7800000 
 414              	.LVL14:
 129:src/Riscv.cpp ****             w_sepc(sepc);
 415              		.loc 1 129 13 is_stmt 1
 416              	.LBB104:
 417              	.LBB105:
 118:src/../h/Riscv.hpp **** }
 418              		.loc 2 118 5
 118:src/../h/Riscv.hpp **** }
 419              		.loc 2 118 65 is_stmt 0
 420              	#APP
 421              	# 118 "src/../h/Riscv.hpp" 1
 422              		csrw sepc, s1
 423              	# 0 "" 2
 424              	.LVL15:
 425              	#NO_APP
 426              	.LBE105:
 427              	.LBE104:
 130:src/Riscv.cpp ****             w_sstatus(sstatus);
 428              		.loc 1 130 13 is_stmt 1
 429              	.LBB106:
 430              	.LBB107:
 182:src/../h/Riscv.hpp **** }
 183:src/../h/Riscv.hpp **** 
 184:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 185:src/../h/Riscv.hpp **** {
 186:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 431              		.loc 2 186 5
GAS LISTING /tmp/cc69O5m9.s 			page 15


 432              		.loc 2 186 77 is_stmt 0
 433              	#APP
 434              	# 186 "src/../h/Riscv.hpp" 1
 187              	}
 435              		csrw sstatus, s2
 436              	# 0 "" 2
 437              		.loc 2 187 1
 438              	#NO_APP
 439 0134 6FF0DFF5 		j	.L5
 440              	.LVL16:
 441              	.L20:
 442              	.LBE107:
 443              	.LBE106:
 444              	.LBE99:
 445              	.LBE98:
 446              	.LBE113:
 447              	.LBE123:
 448              	.LBE132:
 449              	.LBE143:
 450              	.LBE158:
 451              	.LBE170:
 452              	.LBE183:
 453              	.LBE197:
 454              	.LBB198:
  56:src/Riscv.cpp ****             uint64 numBlocks = 0;
 455              		.loc 1 56 13 is_stmt 1
  57:src/Riscv.cpp ****             asm ("mv %0, a1" : "=r" (numBlocks));
 456              		.loc 1 57 13
  57:src/Riscv.cpp ****             asm ("mv %0, a1" : "=r" (numBlocks));
 457              		.loc 1 57 49 is_stmt 0
 458              	#APP
 459              	# 57 "src/Riscv.cpp" 1
 460              		mv a0, a1
 461              	# 0 "" 2
 462              	.LVL17:
  58:src/Riscv.cpp ****             MemoryAllocator::allocate(numBlocks);
 463              		.loc 1 58 13 is_stmt 1
  58:src/Riscv.cpp ****             MemoryAllocator::allocate(numBlocks);
 464              		.loc 1 58 38 is_stmt 0
 465              	#NO_APP
 466 013c 97000000 		call	_ZN15MemoryAllocator8allocateEm@plt
 466      E7800000 
 467              	.LVL18:
  59:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
 468              		.loc 1 59 13 is_stmt 1
  59:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
 469              		.loc 1 59 67 is_stmt 0
 470 0144 97070000 		la	a5,backupSP
 470      83B70700 
 471 014c 83B70700 		ld	a5,0(a5)
 472              	#APP
 473              	# 59 "src/Riscv.cpp" 1
  60:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 474              		sd a0, 0x50(a5)
 475              	# 0 "" 2
 476              		.loc 1 60 13 is_stmt 1
 477              	#NO_APP
GAS LISTING /tmp/cc69O5m9.s 			page 16


 478              	.LBB199:
 479              	.LBB200:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 480              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 481              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 482              		.loc 2 112 64 is_stmt 0
 483              	#APP
 484              	# 112 "src/../h/Riscv.hpp" 1
 485              		csrr a5, sepc
 486              	# 0 "" 2
 487              	#NO_APP
 488 0158 2330F4F8 		sd	a5,-128(s0)
 113:src/../h/Riscv.hpp **** }
 489              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 490              		.loc 2 113 12 is_stmt 0
 491 015c 833704F8 		ld	a5,-128(s0)
 492              	.LBE200:
 493              	.LBE199:
  60:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 494              		.loc 1 60 19
 495 0160 93874700 		addi	a5,a5,4
 496              	.LVL19:
 497              	.LBB201:
 498              	.LBB202:
 118:src/../h/Riscv.hpp **** }
 499              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 500              		.loc 2 118 65 is_stmt 0
 501              	#APP
 502              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 503              		csrw sepc, a5
 504              	# 0 "" 2
 505              		.loc 2 119 1
 506              	#NO_APP
 507 0168 6FF09FF2 		j	.L5
 508              	.LVL20:
 509              	.L21:
 510              	.LBE202:
 511              	.LBE201:
 512              	.LBE198:
 513              	.LBB203:
 514              	.LBB184:
  63:src/Riscv.cpp ****             void* address = nullptr;
 515              		.loc 1 63 13 is_stmt 1
  64:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (address));
 516              		.loc 1 64 13
  64:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (address));
 517              		.loc 1 64 59 is_stmt 0
 518              	#APP
 519              	# 64 "src/Riscv.cpp" 1
 520              		mv a0, a1
 521              	# 0 "" 2
 522              	.LVL21:
GAS LISTING /tmp/cc69O5m9.s 			page 17


  65:src/Riscv.cpp ****             MemoryAllocator::free(address);
 523              		.loc 1 65 13 is_stmt 1
  65:src/Riscv.cpp ****             MemoryAllocator::free(address);
 524              		.loc 1 65 34 is_stmt 0
 525              	#NO_APP
 526 0170 97000000 		call	_ZN15MemoryAllocator4freeEPv@plt
 526      E7800000 
 527              	.LVL22:
  66:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
 528              		.loc 1 66 13 is_stmt 1
  66:src/Riscv.cpp ****             __asm__ volatile("sd a0, 0x50(%0)" : : "r" (backupSP));
 529              		.loc 1 66 67 is_stmt 0
 530 0178 97070000 		la	a5,backupSP
 530      83B70700 
 531 0180 83B70700 		ld	a5,0(a5)
 532              	#APP
 533              	# 66 "src/Riscv.cpp" 1
  67:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 534              		sd a0, 0x50(a5)
 535              	# 0 "" 2
 536              		.loc 1 67 13 is_stmt 1
 537              	#NO_APP
 538              	.LBB185:
 539              	.LBB186:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 540              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 541              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 542              		.loc 2 112 64 is_stmt 0
 543              	#APP
 544              	# 112 "src/../h/Riscv.hpp" 1
 545              		csrr a5, sepc
 546              	# 0 "" 2
 547              	#NO_APP
 548 018c 2334F4F8 		sd	a5,-120(s0)
 113:src/../h/Riscv.hpp **** }
 549              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 550              		.loc 2 113 12 is_stmt 0
 551 0190 833784F8 		ld	a5,-120(s0)
 552              	.LBE186:
 553              	.LBE185:
  67:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 554              		.loc 1 67 19
 555 0194 93874700 		addi	a5,a5,4
 556              	.LVL23:
 557              	.LBB187:
 558              	.LBB188:
 118:src/../h/Riscv.hpp **** }
 559              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 560              		.loc 2 118 65 is_stmt 0
 561              	#APP
 562              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 563              		csrw sepc, a5
GAS LISTING /tmp/cc69O5m9.s 			page 18


 564              	# 0 "" 2
 565              		.loc 2 119 1
 566              	#NO_APP
 567 019c 6FF05FEF 		j	.L5
 568              	.LVL24:
 569              	.L22:
 570              	.LBE188:
 571              	.LBE187:
 572              	.LBE184:
 573              	.LBB189:
 574              	.LBB171:
  70:src/Riscv.cpp ****             CCB** handle;
 575              		.loc 1 70 13 is_stmt 1
  71:src/Riscv.cpp ****             CCB::Body body;
 576              		.loc 1 71 13
  72:src/Riscv.cpp ****             void* args;
 577              		.loc 1 72 13
  73:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 578              		.loc 1 73 13
  73:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 579              		.loc 1 73 59 is_stmt 0
 580              	#APP
 581              	# 73 "src/Riscv.cpp" 1
 582              		mv s1, a1
 583              	# 0 "" 2
 584              	.LVL25:
  74:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (body));
 585              		.loc 1 74 13 is_stmt 1
  74:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (body));
 586              		.loc 1 74 57 is_stmt 0
 587              	# 74 "src/Riscv.cpp" 1
 588              		mv a0, a2
 589              	# 0 "" 2
 590              	.LVL26:
  75:src/Riscv.cpp ****             __asm__ volatile ("ld a3, 0x68(%0)" : : "r" (backupSP));
 591              		.loc 1 75 13 is_stmt 1
  75:src/Riscv.cpp ****             __asm__ volatile ("ld a3, 0x68(%0)" : : "r" (backupSP));
 592              		.loc 1 75 68 is_stmt 0
 593              	#NO_APP
 594 01a8 97070000 		la	a5,backupSP
 594      83B70700 
 595              	.LVL27:
 596 01b0 83B70700 		ld	a5,0(a5)
 597              	#APP
 598              	# 75 "src/Riscv.cpp" 1
  76:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a3" : "=r" (args));
 599              		ld a3, 0x68(a5)
 600              	# 0 "" 2
 601              		.loc 1 76 13 is_stmt 1
  76:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a3" : "=r" (args));
 602              		.loc 1 76 57 is_stmt 0
 603              	# 76 "src/Riscv.cpp" 1
 604              		mv a1, a3
 605              	# 0 "" 2
 606              	.LVL28:
  77:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body, args);
 607              		.loc 1 77 13 is_stmt 1
GAS LISTING /tmp/cc69O5m9.s 			page 19


  77:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body, args);
 608              		.loc 1 77 43 is_stmt 0
 609              	#NO_APP
 610 01bc 97000000 		call	_ZN3CCB15createCoroutineEPFvPvES0_@plt
 610      E7800000 
 611              	.LVL29:
  77:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body, args);
 612              		.loc 1 77 21
 613 01c4 23B0A400 		sd	a0,0(s1)
  78:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 614              		.loc 1 78 13 is_stmt 1
 615              	.LBB172:
 616              	.LBB173:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 617              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 618              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 619              		.loc 2 112 64 is_stmt 0
 620              	#APP
 621              	# 112 "src/../h/Riscv.hpp" 1
 622              		csrr a5, sepc
 623              	# 0 "" 2
 624              	#NO_APP
 625 01cc 2338F4F8 		sd	a5,-112(s0)
 113:src/../h/Riscv.hpp **** }
 626              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 627              		.loc 2 113 12 is_stmt 0
 628 01d0 833704F9 		ld	a5,-112(s0)
 629              	.LBE173:
 630              	.LBE172:
  78:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 631              		.loc 1 78 19
 632 01d4 93874700 		addi	a5,a5,4
 633              	.LVL30:
 634              	.LBB174:
 635              	.LBB175:
 118:src/../h/Riscv.hpp **** }
 636              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 637              		.loc 2 118 65 is_stmt 0
 638              	#APP
 639              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 640              		csrw sepc, a5
 641              	# 0 "" 2
 642              		.loc 2 119 1
 643              	#NO_APP
 644 01dc 6FF05FEB 		j	.L5
 645              	.LVL31:
 646              	.L23:
 647              	.LBE175:
 648              	.LBE174:
 649              	.LBE171:
 650              	.LBB176:
 651              	.LBB159:
GAS LISTING /tmp/cc69O5m9.s 			page 20


  81:src/Riscv.cpp ****             CCB** handle;
 652              		.loc 1 81 13 is_stmt 1
  82:src/Riscv.cpp ****             CCB::Body body;
 653              		.loc 1 82 13
  83:src/Riscv.cpp ****             void* args;
 654              		.loc 1 83 13
  84:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 655              		.loc 1 84 13
  84:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 656              		.loc 1 84 59 is_stmt 0
 657              	#APP
 658              	# 84 "src/Riscv.cpp" 1
 659              		mv s1, a1
 660              	# 0 "" 2
 661              	.LVL32:
  85:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (body));
 662              		.loc 1 85 13 is_stmt 1
  85:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (body));
 663              		.loc 1 85 57 is_stmt 0
 664              	# 85 "src/Riscv.cpp" 1
 665              		mv a0, a2
 666              	# 0 "" 2
 667              	.LVL33:
  86:src/Riscv.cpp ****             __asm__ volatile ("ld a3, 0x68(%0)" : : "r" (backupSP));
 668              		.loc 1 86 13 is_stmt 1
  86:src/Riscv.cpp ****             __asm__ volatile ("ld a3, 0x68(%0)" : : "r" (backupSP));
 669              		.loc 1 86 68 is_stmt 0
 670              	#NO_APP
 671 01e8 97070000 		la	a5,backupSP
 671      83B70700 
 672              	.LVL34:
 673 01f0 83B70700 		ld	a5,0(a5)
 674              	#APP
 675              	# 86 "src/Riscv.cpp" 1
  87:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a3" : "=r" (args));
 676              		ld a3, 0x68(a5)
 677              	# 0 "" 2
 678              		.loc 1 87 13 is_stmt 1
  87:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a3" : "=r" (args));
 679              		.loc 1 87 57 is_stmt 0
 680              	# 87 "src/Riscv.cpp" 1
 681              		mv a1, a3
 682              	# 0 "" 2
 683              	.LVL35:
  88:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body, args);
 684              		.loc 1 88 13 is_stmt 1
  88:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body, args);
 685              		.loc 1 88 43 is_stmt 0
 686              	#NO_APP
 687 01fc 97000000 		call	_ZN3CCB15createCoroutineEPFvPvES0_@plt
 687      E7800000 
 688              	.LVL36:
  88:src/Riscv.cpp ****             *handle = CCB::createCoroutine(body, args);
 689              		.loc 1 88 21
 690 0204 23B0A400 		sd	a0,0(s1)
  89:src/Riscv.cpp ****             Scheduler::put(*handle);
 691              		.loc 1 89 13 is_stmt 1
GAS LISTING /tmp/cc69O5m9.s 			page 21


  89:src/Riscv.cpp ****             Scheduler::put(*handle);
 692              		.loc 1 89 27 is_stmt 0
 693 0208 97000000 		call	_ZN9Scheduler3putEP3CCB@plt
 693      E7800000 
 694              	.LVL37:
  90:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 695              		.loc 1 90 13 is_stmt 1
 696              	.LBB160:
 697              	.LBB161:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 698              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 699              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 700              		.loc 2 112 64 is_stmt 0
 701              	#APP
 702              	# 112 "src/../h/Riscv.hpp" 1
 703              		csrr a5, sepc
 704              	# 0 "" 2
 705              	#NO_APP
 706 0214 233CF4F8 		sd	a5,-104(s0)
 113:src/../h/Riscv.hpp **** }
 707              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 708              		.loc 2 113 12 is_stmt 0
 709 0218 833784F9 		ld	a5,-104(s0)
 710              	.LBE161:
 711              	.LBE160:
  90:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 712              		.loc 1 90 19
 713 021c 93874700 		addi	a5,a5,4
 714              	.LVL38:
 715              	.LBB162:
 716              	.LBB163:
 118:src/../h/Riscv.hpp **** }
 717              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 718              		.loc 2 118 65 is_stmt 0
 719              	#APP
 720              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 721              		csrw sepc, a5
 722              	# 0 "" 2
 723              		.loc 2 119 1
 724              	#NO_APP
 725 0224 6FF0DFE6 		j	.L5
 726              	.LVL39:
 727              	.L24:
 728              	.LBE163:
 729              	.LBE162:
 730              	.LBE159:
 731              	.LBB164:
 732              	.LBB144:
  93:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 733              		.loc 1 93 13 is_stmt 1
 734              	.LBB145:
 735              	.LBB146:
GAS LISTING /tmp/cc69O5m9.s 			page 22


 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 736              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 737              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 738              		.loc 2 112 64 is_stmt 0
 739              	#APP
 740              	# 112 "src/../h/Riscv.hpp" 1
 741              		csrr a5, sepc
 742              	# 0 "" 2
 743              	.LVL40:
 744              	#NO_APP
 745 022c 2334F4FA 		sd	a5,-88(s0)
 113:src/../h/Riscv.hpp **** }
 746              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 747              		.loc 2 113 12 is_stmt 0
 748 0230 833484FA 		ld	s1,-88(s0)
 749              	.LBE146:
 750              	.LBE145:
  93:src/Riscv.cpp ****             uint64 sepc = r_sepc() + 4;
 751              		.loc 1 93 38
 752 0234 93844400 		addi	s1,s1,4
 753              	.LVL41:
  94:src/Riscv.cpp ****             uint64 sstatus = r_sstatus();
 754              		.loc 1 94 13 is_stmt 1
 755              	.LBB147:
 756              	.LBB148:
 179:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 757              		.loc 2 179 5
 180:src/../h/Riscv.hpp ****     return sstatus;
 758              		.loc 2 180 5
 180:src/../h/Riscv.hpp ****     return sstatus;
 759              		.loc 2 180 76 is_stmt 0
 760              	#APP
 761              	# 180 "src/../h/Riscv.hpp" 1
 762              		csrr a5, sstatus
 763              	# 0 "" 2
 764              	#NO_APP
 765 023c 2330F4FA 		sd	a5,-96(s0)
 181:src/../h/Riscv.hpp **** }
 766              		.loc 2 181 5 is_stmt 1
 181:src/../h/Riscv.hpp **** }
 767              		.loc 2 181 12 is_stmt 0
 768 0240 033904FA 		ld	s2,-96(s0)
 769              	.LVL42:
 770              	.LBE148:
 771              	.LBE147:
  95:src/Riscv.cpp ****             CCB::dispatch();
 772              		.loc 1 95 13 is_stmt 1
  95:src/Riscv.cpp ****             CCB::dispatch();
 773              		.loc 1 95 26 is_stmt 0
 774 0244 97000000 		call	_ZN3CCB8dispatchEv@plt
 774      E7800000 
 775              	.LVL43:
  96:src/Riscv.cpp ****             w_sstatus(sstatus);
 776              		.loc 1 96 13 is_stmt 1
GAS LISTING /tmp/cc69O5m9.s 			page 23


 777              	.LBB149:
 778              	.LBB150:
 186:src/../h/Riscv.hpp **** }
 779              		.loc 2 186 5
 186:src/../h/Riscv.hpp **** }
 780              		.loc 2 186 77 is_stmt 0
 781              	#APP
 782              	# 186 "src/../h/Riscv.hpp" 1
 783              		csrw sstatus, s2
 784              	# 0 "" 2
 785              	.LVL44:
 786              	#NO_APP
 787              	.LBE150:
 788              	.LBE149:
  97:src/Riscv.cpp ****             w_sepc(sepc);
 789              		.loc 1 97 13 is_stmt 1
 790              	.LBB151:
 791              	.LBB152:
 118:src/../h/Riscv.hpp **** }
 792              		.loc 2 118 5
 118:src/../h/Riscv.hpp **** }
 793              		.loc 2 118 65 is_stmt 0
 794              	#APP
 795              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 796              		csrw sepc, s1
 797              	# 0 "" 2
 798              		.loc 2 119 1
 799              	#NO_APP
 800 0254 6FF0DFE3 		j	.L5
 801              	.LVL45:
 802              	.L25:
 803              	.LBE152:
 804              	.LBE151:
 805              	.LBE144:
 806              	.LBB153:
 100:src/Riscv.cpp ****             CCB::running->setFinished(true);
 807              		.loc 1 100 13 is_stmt 1
 100:src/Riscv.cpp ****             CCB::running->setFinished(true);
 808              		.loc 1 100 38 is_stmt 0
 809 0258 97070000 		la	a5,_ZN3CCB7runningE
 809      83B70700 
 810              	.LVL46:
 811 0260 83B70700 		ld	a5,0(a5)
 812              	.LVL47:
 813              	.LBB133:
 814              	.LBB134:
 815              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 6/24/22.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJECT_V33333333333_CCB_HPP
   6:src/../h/tcb.hpp **** #define PROJECT_V33333333333_CCB_HPP
   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "Scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "syscall_c.h"
GAS LISTING /tmp/cc69O5m9.s 			page 24


  10:src/../h/tcb.hpp **** #include "MemoryAllocator.hpp"
  11:src/../h/tcb.hpp **** #include "Riscv.hpp"
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp **** // Coroutine Control Block
  14:src/../h/tcb.hpp **** class CCB
  15:src/../h/tcb.hpp **** {
  16:src/../h/tcb.hpp **** public:
  17:src/../h/tcb.hpp ****     ~CCB() { delete[] stack; }
  18:src/../h/tcb.hpp ****     void* operator new(size_t size) {
  19:src/../h/tcb.hpp ****         return MemoryAllocator::allocateB(size);
  20:src/../h/tcb.hpp ****     }
  21:src/../h/tcb.hpp ****     void operator delete(void* address) {
  22:src/../h/tcb.hpp ****         MemoryAllocator::free(address);
  23:src/../h/tcb.hpp ****     }
  24:src/../h/tcb.hpp **** 
  25:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  26:src/../h/tcb.hpp ****     bool isBlocked() const { return blocked; }
  27:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value;}
 816              		.loc 3 27 36 is_stmt 1
 817              		.loc 3 27 45 is_stmt 0
 818 0264 13071000 		li	a4,1
 819 0268 2384E702 		sb	a4,40(a5)
 820              	.LVL48:
 821              	.LBE134:
 822              	.LBE133:
 101:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 823              		.loc 1 101 13 is_stmt 1
 824              	.LBB135:
 825              	.LBB136:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 826              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 827              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 828              		.loc 2 112 64 is_stmt 0
 829              	#APP
 830              	# 112 "src/../h/Riscv.hpp" 1
 831              		csrr a5, sepc
 832              	# 0 "" 2
 833              	#NO_APP
 834 0270 2338F4FA 		sd	a5,-80(s0)
 113:src/../h/Riscv.hpp **** }
 835              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 836              		.loc 2 113 12 is_stmt 0
 837 0274 833704FB 		ld	a5,-80(s0)
 838              	.LBE136:
 839              	.LBE135:
 101:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 840              		.loc 1 101 19
 841 0278 93874700 		addi	a5,a5,4
 842              	.LVL49:
 843              	.LBB137:
 844              	.LBB138:
 118:src/../h/Riscv.hpp **** }
 845              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/cc69O5m9.s 			page 25


 846              		.loc 2 118 65 is_stmt 0
 847              	#APP
 848              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 849              		csrw sepc, a5
 850              	# 0 "" 2
 851              		.loc 2 119 1
 852              	#NO_APP
 853 0280 6FF01FE1 		j	.L5
 854              	.LVL50:
 855              	.L26:
 856              	.LBE138:
 857              	.LBE137:
 858              	.LBB139:
 859              	.LBB124:
 104:src/Riscv.cpp ****             Semaphore_sys **handle;
 860              		.loc 1 104 13 is_stmt 1
 105:src/Riscv.cpp ****             unsigned init;
 861              		.loc 1 105 13
 106:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 862              		.loc 1 106 13
 106:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 863              		.loc 1 106 59 is_stmt 0
 864              	#APP
 865              	# 106 "src/Riscv.cpp" 1
 866              		mv s1, a1
 867              	# 0 "" 2
 868              	.LVL51:
 107:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (init));
 869              		.loc 1 107 13 is_stmt 1
 107:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a2" : "=r" (init));
 870              		.loc 1 107 57 is_stmt 0
 871              	# 107 "src/Riscv.cpp" 1
 872              		mv a0, a2
 873              	# 0 "" 2
 874              	.LVL52:
 108:src/Riscv.cpp ****             *handle = Semaphore_sys::createSemaphore(init);
 875              		.loc 1 108 13 is_stmt 1
 108:src/Riscv.cpp ****             *handle = Semaphore_sys::createSemaphore(init);
 876              		.loc 1 108 53 is_stmt 0
 877              	#NO_APP
 878 028c 1B050500 		sext.w	a0,a0
 879 0290 97000000 		call	_ZN13Semaphore_sys15createSemaphoreEj@plt
 879      E7800000 
 880              	.LVL53:
 108:src/Riscv.cpp ****             *handle = Semaphore_sys::createSemaphore(init);
 881              		.loc 1 108 21
 882 0298 23B0A400 		sd	a0,0(s1)
 109:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 883              		.loc 1 109 13 is_stmt 1
 884              	.LBB125:
 885              	.LBB126:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 886              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 887              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
GAS LISTING /tmp/cc69O5m9.s 			page 26


 888              		.loc 2 112 64 is_stmt 0
 889              	#APP
 890              	# 112 "src/../h/Riscv.hpp" 1
 891              		csrr a5, sepc
 892              	# 0 "" 2
 893              	#NO_APP
 894 02a0 233CF4FA 		sd	a5,-72(s0)
 113:src/../h/Riscv.hpp **** }
 895              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 896              		.loc 2 113 12 is_stmt 0
 897 02a4 833784FB 		ld	a5,-72(s0)
 898              	.LBE126:
 899              	.LBE125:
 109:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 900              		.loc 1 109 19
 901 02a8 93874700 		addi	a5,a5,4
 902              	.LVL54:
 903              	.LBB127:
 904              	.LBB128:
 118:src/../h/Riscv.hpp **** }
 905              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 906              		.loc 2 118 65 is_stmt 0
 907              	#APP
 908              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 909              		csrw sepc, a5
 910              	# 0 "" 2
 911              		.loc 2 119 1
 912              	#NO_APP
 913 02b0 6FF01FDE 		j	.L5
 914              	.LVL55:
 915              	.L27:
 916              	.LBE128:
 917              	.LBE127:
 918              	.LBE124:
 919              	.LBB129:
 920              	.LBB114:
 112:src/Riscv.cpp ****             Semaphore_sys *handle;
 921              		.loc 1 112 13 is_stmt 1
 113:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 922              		.loc 1 113 13
 113:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 923              		.loc 1 113 59 is_stmt 0
 924              	#APP
 925              	# 113 "src/Riscv.cpp" 1
 926              		mv a0, a1
 927              	# 0 "" 2
 928              	.LVL56:
 114:src/Riscv.cpp ****             delete handle;
 929              		.loc 1 114 13 is_stmt 1
 114:src/Riscv.cpp ****             delete handle;
 930              		.loc 1 114 26 is_stmt 0
 931              	#NO_APP
 932 02b8 63060500 		beqz	a0,.L15
 933              	.LVL57:
GAS LISTING /tmp/cc69O5m9.s 			page 27


 934              	.LBB115:
 935              	.LBB116:
 936              		.file 4 "src/../h/Semaphore.hpp"
   1:src/../h/Semaphore.hpp **** //
   2:src/../h/Semaphore.hpp **** // Created by os on 6/26/22.
   3:src/../h/Semaphore.hpp **** //
   4:src/../h/Semaphore.hpp **** 
   5:src/../h/Semaphore.hpp **** #ifndef SYNCH_WORKING_SEMAPHORE_HPP
   6:src/../h/Semaphore.hpp **** #define SYNCH_WORKING_SEMAPHORE_HPP
   7:src/../h/Semaphore.hpp **** #include "List.hpp"
   8:src/../h/Semaphore.hpp **** #include "tcb.hpp"
   9:src/../h/Semaphore.hpp **** class Semaphore_sys {
  10:src/../h/Semaphore.hpp **** public:
  11:src/../h/Semaphore.hpp ****     Semaphore_sys(unsigned init = 1): val(init) {}
  12:src/../h/Semaphore.hpp ****     void* operator new(size_t size) {
  13:src/../h/Semaphore.hpp ****         return MemoryAllocator::allocateB(size);
  14:src/../h/Semaphore.hpp ****     }
  15:src/../h/Semaphore.hpp ****     void operator delete(void* address) {
  16:src/../h/Semaphore.hpp ****         MemoryAllocator::free(address);
 937              		.loc 4 16 9 is_stmt 1 discriminator 1
 938              		.loc 4 16 30 is_stmt 0 discriminator 1
 939 02bc 97000000 		call	_ZN15MemoryAllocator4freeEPv@plt
 939      E7800000 
 940              	.LVL58:
 941              	.L15:
 942              	.LBE116:
 943              	.LBE115:
 115:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 944              		.loc 1 115 13 is_stmt 1
 945              	.LBB117:
 946              	.LBB118:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 947              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 948              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 949              		.loc 2 112 64 is_stmt 0
 950              	#APP
 951              	# 112 "src/../h/Riscv.hpp" 1
 952              		csrr a5, sepc
 953              	# 0 "" 2
 954              	#NO_APP
 955 02c8 2330F4FC 		sd	a5,-64(s0)
 113:src/../h/Riscv.hpp **** }
 956              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 957              		.loc 2 113 12 is_stmt 0
 958 02cc 833704FC 		ld	a5,-64(s0)
 959              	.LBE118:
 960              	.LBE117:
 115:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 961              		.loc 1 115 19
 962 02d0 93874700 		addi	a5,a5,4
 963              	.LVL59:
 964              	.LBB119:
 965              	.LBB120:
 118:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/cc69O5m9.s 			page 28


 966              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 967              		.loc 2 118 65 is_stmt 0
 968              	#APP
 969              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 970              		csrw sepc, a5
 971              	# 0 "" 2
 972              		.loc 2 119 1
 973              	#NO_APP
 974 02d8 6FF09FDB 		j	.L5
 975              	.LVL60:
 976              	.L28:
 977              	.LBE120:
 978              	.LBE119:
 979              	.LBE114:
 980              	.LBB121:
 981              	.LBB108:
 118:src/Riscv.cpp ****             Semaphore_sys *handle;
 982              		.loc 1 118 13 is_stmt 1
 119:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 983              		.loc 1 119 13
 119:src/Riscv.cpp ****             __asm__ volatile ("mv %0, a1" : "=r" (handle));
 984              		.loc 1 119 59 is_stmt 0
 985              	#APP
 986              	# 119 "src/Riscv.cpp" 1
 987              		mv a0, a1
 988              	# 0 "" 2
 989              	.LVL61:
 120:src/Riscv.cpp ****             handle->signal();
 990              		.loc 1 120 13 is_stmt 1
 120:src/Riscv.cpp ****             handle->signal();
 991              		.loc 1 120 27 is_stmt 0
 992              	#NO_APP
 993 02e0 97000000 		call	_ZN13Semaphore_sys6signalEv@plt
 993      E7800000 
 994              	.LVL62:
 121:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 995              		.loc 1 121 13 is_stmt 1
 996              	.LBB109:
 997              	.LBB110:
 111:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 998              		.loc 2 111 5
 112:src/../h/Riscv.hpp ****     return sepc;
 999              		.loc 2 112 5
 112:src/../h/Riscv.hpp ****     return sepc;
 1000              		.loc 2 112 64 is_stmt 0
 1001              	#APP
 1002              	# 112 "src/../h/Riscv.hpp" 1
 1003              		csrr a5, sepc
 1004              	# 0 "" 2
 1005              	#NO_APP
 1006 02ec 2334F4FC 		sd	a5,-56(s0)
 113:src/../h/Riscv.hpp **** }
 1007              		.loc 2 113 5 is_stmt 1
 113:src/../h/Riscv.hpp **** }
 1008              		.loc 2 113 12 is_stmt 0
GAS LISTING /tmp/cc69O5m9.s 			page 29


 1009 02f0 833784FC 		ld	a5,-56(s0)
 1010              	.LBE110:
 1011              	.LBE109:
 121:src/Riscv.cpp ****             w_sepc(r_sepc() + 4);
 1012              		.loc 1 121 19
 1013 02f4 93874700 		addi	a5,a5,4
 1014              	.LVL63:
 1015              	.LBB111:
 1016              	.LBB112:
 118:src/../h/Riscv.hpp **** }
 1017              		.loc 2 118 5 is_stmt 1
 118:src/../h/Riscv.hpp **** }
 1018              		.loc 2 118 65 is_stmt 0
 1019              	#APP
 1020              	# 118 "src/../h/Riscv.hpp" 1
 119:src/../h/Riscv.hpp **** 
 1021              		csrw sepc, a5
 1022              	# 0 "" 2
 1023              		.loc 2 119 1
 1024              	#NO_APP
 1025 02fc 6FF05FD9 		j	.L5
 1026              	.LBE112:
 1027              	.LBE111:
 1028              	.LBE108:
 1029              	.LBE121:
 1030              	.LBE129:
 1031              	.LBE139:
 1032              	.LBE153:
 1033              	.LBE164:
 1034              	.LBE176:
 1035              	.LBE189:
 1036              	.LBE203:
 1037              	.LBE212:
 1038              	.LBE221:
 1039              	.LBE233:
 1040              	.LBE244:
 1041              		.cfi_endproc
 1042              	.LFE55:
 1044              	.Letext0:
 1045              		.file 5 "src/../h/../lib/hw.h"
 1046              		.file 6 "src/../h/MemoryAllocator.hpp"
 1047              		.file 7 "src/../h/Scheduler.hpp"
 1048              		.file 8 "src/../h/List.hpp"
 1049              		.file 9 "src/../h/syscall_c.h"
 1050              		.file 10 "src/../lib/console.h"
GAS LISTING /tmp/cc69O5m9.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/cc69O5m9.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cc69O5m9.s:13     .text:0000000000000000 .L0 
     /tmp/cc69O5m9.s:14     .text:0000000000000000 .L0 
     /tmp/cc69O5m9.s:15     .text:0000000000000004 .L0 
     /tmp/cc69O5m9.s:17     .text:0000000000000008 .L0 
     /tmp/cc69O5m9.s:19     .text:000000000000000c .L0 
     /tmp/cc69O5m9.s:25     .text:000000000000000c .L0 
     /tmp/cc69O5m9.s:26     .text:000000000000000c .L0 
     /tmp/cc69O5m9.s:27     .text:000000000000000c .L0 
     /tmp/cc69O5m9.s:37     .text:0000000000000014 .L0 
       src/Riscv.cpp:30     .text:0000000000000014 .L0 
     /tmp/cc69O5m9.s:43     .text:0000000000000018 .L0 
       src/Riscv.cpp:31     .text:0000000000000018 .L0 
     /tmp/cc69O5m9.s:48     .text:000000000000001c .L0 
       src/Riscv.cpp:32     .text:000000000000001c .L0 
     /tmp/cc69O5m9.s:54     .text:0000000000000020 .L0 
     /tmp/cc69O5m9.s:55     .text:0000000000000024 .L0 
     /tmp/cc69O5m9.s:56     .text:0000000000000024 .L0 
     /tmp/cc69O5m9.s:58     .text:0000000000000028 .L0 
     /tmp/cc69O5m9.s:60     .text:000000000000002c .L0 
     /tmp/cc69O5m9.s:66     .text:000000000000002c _ZN5Riscv16interruptHandlerEv
     /tmp/cc69O5m9.s:69     .text:000000000000002c .L0 
     /tmp/cc69O5m9.s:70     .text:000000000000002c .L0 
     /tmp/cc69O5m9.s:71     .text:0000000000000030 .L0 
     /tmp/cc69O5m9.s:76     .text:0000000000000040 .L0 
     /tmp/cc69O5m9.s:77     .text:0000000000000040 .L0 
     /tmp/cc69O5m9.s:78     .text:0000000000000040 .L0 
     /tmp/cc69O5m9.s:79     .text:0000000000000040 .L0 
     /tmp/cc69O5m9.s:81     .text:0000000000000044 .L0 
     /tmp/cc69O5m9.s:85     .text:0000000000000044 .L0 
     /tmp/cc69O5m9.s:86     .text:0000000000000044 .L0 
     /tmp/cc69O5m9.s:87     .text:0000000000000044 .L0 
  src/../h/Riscv.hpp:100    .text:0000000000000044 .L0 
     /tmp/cc69O5m9.s:95     .text:000000000000004c .L0 
     /tmp/cc69O5m9.s:96     .text:000000000000004c .L0 
     /tmp/cc69O5m9.s:102    .text:0000000000000050 .L0 
     /tmp/cc69O5m9.s:110    .text:0000000000000060 .L0 
     /tmp/cc69O5m9.s:111    .text:0000000000000060 .L0 
     /tmp/cc69O5m9.s:113    .text:0000000000000064 .L0 
     /tmp/cc69O5m9.s:116    .text:000000000000006c .L0 
     /tmp/cc69O5m9.s:121    .text:000000000000007c .L0 
     /tmp/cc69O5m9.s:122    .text:000000000000007c .L0 
     /tmp/cc69O5m9.s:131    .text:0000000000000088 .L0 
     /tmp/cc69O5m9.s:132    .text:0000000000000088 .L0 
     /tmp/cc69O5m9.s:133    .text:0000000000000088 .L0 
     /tmp/cc69O5m9.s:145    .text:0000000000000090 .L0 
     /tmp/cc69O5m9.s:146    .text:0000000000000090 .L0 
     /tmp/cc69O5m9.s:149    .text:0000000000000098 .L0 
     /tmp/cc69O5m9.s:150    .text:000000000000009c .L0 
     /tmp/cc69O5m9.s:151    .text:000000000000009c .L0 
     /tmp/cc69O5m9.s:153    .text:00000000000000a0 .L0 
     /tmp/cc69O5m9.s:154    .text:00000000000000a0 .L0 
     /tmp/cc69O5m9.s:156    .text:00000000000000a4 .L0 
     /tmp/cc69O5m9.s:158    .text:00000000000000a8 .L0 
     /tmp/cc69O5m9.s:160    .text:00000000000000ac .L0 
GAS LISTING /tmp/cc69O5m9.s 			page 31


     /tmp/cc69O5m9.s:164    .text:00000000000000b0 .L0 
     /tmp/cc69O5m9.s:169    .text:00000000000000b0 .L0 
     /tmp/cc69O5m9.s:170    .text:00000000000000b0 .L0 
       src/Riscv.cpp:54     .text:00000000000000b0 .L0 
     /tmp/cc69O5m9.s:179    .text:00000000000000b4 .L0 
     /tmp/cc69O5m9.s:192    .text:00000000000000bc .L0 
     /tmp/cc69O5m9.s:206    .text:00000000000000c4 .L0 
     /tmp/cc69O5m9.s:222    .text:00000000000000cc .L0 
     /tmp/cc69O5m9.s:240    .text:00000000000000d4 .L0 
     /tmp/cc69O5m9.s:260    .text:00000000000000dc .L0 
     /tmp/cc69O5m9.s:282    .text:00000000000000e4 .L0 
     /tmp/cc69O5m9.s:306    .text:00000000000000ec .L0 
     /tmp/cc69O5m9.s:332    .text:00000000000000f4 .L0 
     /tmp/cc69O5m9.s:360    .text:00000000000000fc .L0 
     /tmp/cc69O5m9.s:366    .text:0000000000000104 .L0 
     /tmp/cc69O5m9.s:367    .text:0000000000000104 .L0 
     /tmp/cc69O5m9.s:368    .text:0000000000000104 .L0 
  src/../h/Riscv.hpp:112    .text:0000000000000104 .L0 
     /tmp/cc69O5m9.s:377    .text:000000000000010c .L0 
     /tmp/cc69O5m9.s:378    .text:000000000000010c .L0 
     /tmp/cc69O5m9.s:382    .text:0000000000000110 .L0 
     /tmp/cc69O5m9.s:387    .text:0000000000000114 .L0 
     /tmp/cc69O5m9.s:388    .text:0000000000000114 .L0 
     /tmp/cc69O5m9.s:389    .text:0000000000000114 .L0 
  src/../h/Riscv.hpp:180    .text:0000000000000114 .L0 
     /tmp/cc69O5m9.s:397    .text:000000000000011c .L0 
     /tmp/cc69O5m9.s:398    .text:000000000000011c .L0 
     /tmp/cc69O5m9.s:403    .text:0000000000000120 .L0 
     /tmp/cc69O5m9.s:404    .text:0000000000000120 .L0 
       src/Riscv.cpp:127    .text:0000000000000120 .L0 
     /tmp/cc69O5m9.s:411    .text:0000000000000124 .L0 
     /tmp/cc69O5m9.s:413    .text:0000000000000124 .L0 
     /tmp/cc69O5m9.s:418    .text:000000000000012c .L0 
     /tmp/cc69O5m9.s:419    .text:000000000000012c .L0 
  src/../h/Riscv.hpp:118    .text:000000000000012c .L0 
     /tmp/cc69O5m9.s:431    .text:0000000000000130 .L0 
     /tmp/cc69O5m9.s:432    .text:0000000000000130 .L0 
  src/../h/Riscv.hpp:186    .text:0000000000000130 .L0 
     /tmp/cc69O5m9.s:439    .text:0000000000000134 .L0 
     /tmp/cc69O5m9.s:456    .text:0000000000000138 .L0 
     /tmp/cc69O5m9.s:457    .text:0000000000000138 .L0 
       src/Riscv.cpp:57     .text:0000000000000138 .L0 
     /tmp/cc69O5m9.s:464    .text:000000000000013c .L0 
     /tmp/cc69O5m9.s:466    .text:000000000000013c .L0 
     /tmp/cc69O5m9.s:469    .text:0000000000000144 .L0 
     /tmp/cc69O5m9.s:470    .text:0000000000000144 .L0 
     /tmp/cc69O5m9.s:480    .text:0000000000000154 .L0 
     /tmp/cc69O5m9.s:481    .text:0000000000000154 .L0 
     /tmp/cc69O5m9.s:482    .text:0000000000000154 .L0 
  src/../h/Riscv.hpp:112    .text:0000000000000154 .L0 
     /tmp/cc69O5m9.s:490    .text:000000000000015c .L0 
     /tmp/cc69O5m9.s:491    .text:000000000000015c .L0 
     /tmp/cc69O5m9.s:495    .text:0000000000000160 .L0 
     /tmp/cc69O5m9.s:500    .text:0000000000000164 .L0 
  src/../h/Riscv.hpp:118    .text:0000000000000164 .L0 
     /tmp/cc69O5m9.s:507    .text:0000000000000168 .L0 
     /tmp/cc69O5m9.s:516    .text:000000000000016c .L0 
GAS LISTING /tmp/cc69O5m9.s 			page 32


     /tmp/cc69O5m9.s:517    .text:000000000000016c .L0 
       src/Riscv.cpp:64     .text:000000000000016c .L0 
     /tmp/cc69O5m9.s:524    .text:0000000000000170 .L0 
     /tmp/cc69O5m9.s:526    .text:0000000000000170 .L0 
     /tmp/cc69O5m9.s:529    .text:0000000000000178 .L0 
     /tmp/cc69O5m9.s:530    .text:0000000000000178 .L0 
     /tmp/cc69O5m9.s:540    .text:0000000000000188 .L0 
     /tmp/cc69O5m9.s:541    .text:0000000000000188 .L0 
     /tmp/cc69O5m9.s:542    .text:0000000000000188 .L0 
  src/../h/Riscv.hpp:112    .text:0000000000000188 .L0 
     /tmp/cc69O5m9.s:550    .text:0000000000000190 .L0 
     /tmp/cc69O5m9.s:551    .text:0000000000000190 .L0 
     /tmp/cc69O5m9.s:555    .text:0000000000000194 .L0 
     /tmp/cc69O5m9.s:560    .text:0000000000000198 .L0 
  src/../h/Riscv.hpp:118    .text:0000000000000198 .L0 
     /tmp/cc69O5m9.s:567    .text:000000000000019c .L0 
     /tmp/cc69O5m9.s:576    .text:00000000000001a0 .L0 
     /tmp/cc69O5m9.s:577    .text:00000000000001a0 .L0 
     /tmp/cc69O5m9.s:578    .text:00000000000001a0 .L0 
     /tmp/cc69O5m9.s:579    .text:00000000000001a0 .L0 
       src/Riscv.cpp:73     .text:00000000000001a0 .L0 
     /tmp/cc69O5m9.s:586    .text:00000000000001a4 .L0 
       src/Riscv.cpp:74     .text:00000000000001a4 .L0 
     /tmp/cc69O5m9.s:592    .text:00000000000001a8 .L0 
     /tmp/cc69O5m9.s:594    .text:00000000000001a8 .L0 
     /tmp/cc69O5m9.s:602    .text:00000000000001b8 .L0 
       src/Riscv.cpp:76     .text:00000000000001b8 .L0 
     /tmp/cc69O5m9.s:608    .text:00000000000001bc .L0 
     /tmp/cc69O5m9.s:610    .text:00000000000001bc .L0 
     /tmp/cc69O5m9.s:613    .text:00000000000001c4 .L0 
     /tmp/cc69O5m9.s:617    .text:00000000000001c8 .L0 
     /tmp/cc69O5m9.s:618    .text:00000000000001c8 .L0 
     /tmp/cc69O5m9.s:619    .text:00000000000001c8 .L0 
  src/../h/Riscv.hpp:112    .text:00000000000001c8 .L0 
     /tmp/cc69O5m9.s:627    .text:00000000000001d0 .L0 
     /tmp/cc69O5m9.s:628    .text:00000000000001d0 .L0 
     /tmp/cc69O5m9.s:632    .text:00000000000001d4 .L0 
     /tmp/cc69O5m9.s:637    .text:00000000000001d8 .L0 
  src/../h/Riscv.hpp:118    .text:00000000000001d8 .L0 
     /tmp/cc69O5m9.s:644    .text:00000000000001dc .L0 
     /tmp/cc69O5m9.s:653    .text:00000000000001e0 .L0 
     /tmp/cc69O5m9.s:654    .text:00000000000001e0 .L0 
     /tmp/cc69O5m9.s:655    .text:00000000000001e0 .L0 
     /tmp/cc69O5m9.s:656    .text:00000000000001e0 .L0 
       src/Riscv.cpp:84     .text:00000000000001e0 .L0 
     /tmp/cc69O5m9.s:663    .text:00000000000001e4 .L0 
       src/Riscv.cpp:85     .text:00000000000001e4 .L0 
     /tmp/cc69O5m9.s:669    .text:00000000000001e8 .L0 
     /tmp/cc69O5m9.s:671    .text:00000000000001e8 .L0 
     /tmp/cc69O5m9.s:679    .text:00000000000001f8 .L0 
       src/Riscv.cpp:87     .text:00000000000001f8 .L0 
     /tmp/cc69O5m9.s:685    .text:00000000000001fc .L0 
     /tmp/cc69O5m9.s:687    .text:00000000000001fc .L0 
     /tmp/cc69O5m9.s:690    .text:0000000000000204 .L0 
     /tmp/cc69O5m9.s:692    .text:0000000000000208 .L0 
     /tmp/cc69O5m9.s:693    .text:0000000000000208 .L0 
     /tmp/cc69O5m9.s:698    .text:0000000000000210 .L0 
GAS LISTING /tmp/cc69O5m9.s 			page 33


     /tmp/cc69O5m9.s:699    .text:0000000000000210 .L0 
     /tmp/cc69O5m9.s:700    .text:0000000000000210 .L0 
  src/../h/Riscv.hpp:112    .text:0000000000000210 .L0 
     /tmp/cc69O5m9.s:708    .text:0000000000000218 .L0 
     /tmp/cc69O5m9.s:709    .text:0000000000000218 .L0 
     /tmp/cc69O5m9.s:713    .text:000000000000021c .L0 
     /tmp/cc69O5m9.s:718    .text:0000000000000220 .L0 
  src/../h/Riscv.hpp:118    .text:0000000000000220 .L0 
     /tmp/cc69O5m9.s:725    .text:0000000000000224 .L0 
     /tmp/cc69O5m9.s:736    .text:0000000000000228 .L0 
     /tmp/cc69O5m9.s:737    .text:0000000000000228 .L0 
     /tmp/cc69O5m9.s:738    .text:0000000000000228 .L0 
  src/../h/Riscv.hpp:112    .text:0000000000000228 .L0 
     /tmp/cc69O5m9.s:747    .text:0000000000000230 .L0 
     /tmp/cc69O5m9.s:748    .text:0000000000000230 .L0 
     /tmp/cc69O5m9.s:752    .text:0000000000000234 .L0 
     /tmp/cc69O5m9.s:757    .text:0000000000000238 .L0 
     /tmp/cc69O5m9.s:758    .text:0000000000000238 .L0 
     /tmp/cc69O5m9.s:759    .text:0000000000000238 .L0 
  src/../h/Riscv.hpp:180    .text:0000000000000238 .L0 
     /tmp/cc69O5m9.s:767    .text:0000000000000240 .L0 
     /tmp/cc69O5m9.s:768    .text:0000000000000240 .L0 
     /tmp/cc69O5m9.s:773    .text:0000000000000244 .L0 
     /tmp/cc69O5m9.s:774    .text:0000000000000244 .L0 
     /tmp/cc69O5m9.s:779    .text:000000000000024c .L0 
     /tmp/cc69O5m9.s:780    .text:000000000000024c .L0 
  src/../h/Riscv.hpp:186    .text:000000000000024c .L0 
     /tmp/cc69O5m9.s:792    .text:0000000000000250 .L0 
     /tmp/cc69O5m9.s:793    .text:0000000000000250 .L0 
  src/../h/Riscv.hpp:118    .text:0000000000000250 .L0 
     /tmp/cc69O5m9.s:800    .text:0000000000000254 .L0 
     /tmp/cc69O5m9.s:808    .text:0000000000000258 .L0 
     /tmp/cc69O5m9.s:809    .text:0000000000000258 .L0 
     /tmp/cc69O5m9.s:817    .text:0000000000000264 .L0 
     /tmp/cc69O5m9.s:818    .text:0000000000000264 .L0 
     /tmp/cc69O5m9.s:826    .text:000000000000026c .L0 
     /tmp/cc69O5m9.s:827    .text:000000000000026c .L0 
     /tmp/cc69O5m9.s:828    .text:000000000000026c .L0 
  src/../h/Riscv.hpp:112    .text:000000000000026c .L0 
     /tmp/cc69O5m9.s:836    .text:0000000000000274 .L0 
     /tmp/cc69O5m9.s:837    .text:0000000000000274 .L0 
     /tmp/cc69O5m9.s:841    .text:0000000000000278 .L0 
     /tmp/cc69O5m9.s:846    .text:000000000000027c .L0 
  src/../h/Riscv.hpp:118    .text:000000000000027c .L0 
     /tmp/cc69O5m9.s:853    .text:0000000000000280 .L0 
     /tmp/cc69O5m9.s:861    .text:0000000000000284 .L0 
     /tmp/cc69O5m9.s:862    .text:0000000000000284 .L0 
     /tmp/cc69O5m9.s:863    .text:0000000000000284 .L0 
       src/Riscv.cpp:106    .text:0000000000000284 .L0 
     /tmp/cc69O5m9.s:870    .text:0000000000000288 .L0 
       src/Riscv.cpp:107    .text:0000000000000288 .L0 
     /tmp/cc69O5m9.s:876    .text:000000000000028c .L0 
     /tmp/cc69O5m9.s:878    .text:000000000000028c .L0 
     /tmp/cc69O5m9.s:882    .text:0000000000000298 .L0 
     /tmp/cc69O5m9.s:886    .text:000000000000029c .L0 
     /tmp/cc69O5m9.s:887    .text:000000000000029c .L0 
     /tmp/cc69O5m9.s:888    .text:000000000000029c .L0 
GAS LISTING /tmp/cc69O5m9.s 			page 34


  src/../h/Riscv.hpp:112    .text:000000000000029c .L0 
     /tmp/cc69O5m9.s:896    .text:00000000000002a4 .L0 
     /tmp/cc69O5m9.s:897    .text:00000000000002a4 .L0 
     /tmp/cc69O5m9.s:901    .text:00000000000002a8 .L0 
     /tmp/cc69O5m9.s:906    .text:00000000000002ac .L0 
  src/../h/Riscv.hpp:118    .text:00000000000002ac .L0 
     /tmp/cc69O5m9.s:913    .text:00000000000002b0 .L0 
     /tmp/cc69O5m9.s:922    .text:00000000000002b4 .L0 
     /tmp/cc69O5m9.s:923    .text:00000000000002b4 .L0 
       src/Riscv.cpp:113    .text:00000000000002b4 .L0 
     /tmp/cc69O5m9.s:930    .text:00000000000002b8 .L0 
     /tmp/cc69O5m9.s:932    .text:00000000000002b8 .L0 
     /tmp/cc69O5m9.s:938    .text:00000000000002bc .L0 
     /tmp/cc69O5m9.s:939    .text:00000000000002bc .L0 
     /tmp/cc69O5m9.s:947    .text:00000000000002c4 .L0 
     /tmp/cc69O5m9.s:948    .text:00000000000002c4 .L0 
     /tmp/cc69O5m9.s:949    .text:00000000000002c4 .L0 
  src/../h/Riscv.hpp:112    .text:00000000000002c4 .L0 
     /tmp/cc69O5m9.s:957    .text:00000000000002cc .L0 
     /tmp/cc69O5m9.s:958    .text:00000000000002cc .L0 
     /tmp/cc69O5m9.s:962    .text:00000000000002d0 .L0 
     /tmp/cc69O5m9.s:967    .text:00000000000002d4 .L0 
  src/../h/Riscv.hpp:118    .text:00000000000002d4 .L0 
     /tmp/cc69O5m9.s:974    .text:00000000000002d8 .L0 
     /tmp/cc69O5m9.s:983    .text:00000000000002dc .L0 
     /tmp/cc69O5m9.s:984    .text:00000000000002dc .L0 
       src/Riscv.cpp:119    .text:00000000000002dc .L0 
     /tmp/cc69O5m9.s:991    .text:00000000000002e0 .L0 
     /tmp/cc69O5m9.s:993    .text:00000000000002e0 .L0 
     /tmp/cc69O5m9.s:998    .text:00000000000002e8 .L0 
     /tmp/cc69O5m9.s:999    .text:00000000000002e8 .L0 
     /tmp/cc69O5m9.s:1000   .text:00000000000002e8 .L0 
  src/../h/Riscv.hpp:112    .text:00000000000002e8 .L0 
     /tmp/cc69O5m9.s:1008   .text:00000000000002f0 .L0 
     /tmp/cc69O5m9.s:1009   .text:00000000000002f0 .L0 
     /tmp/cc69O5m9.s:1013   .text:00000000000002f4 .L0 
     /tmp/cc69O5m9.s:1018   .text:00000000000002f8 .L0 
  src/../h/Riscv.hpp:118    .text:00000000000002f8 .L0 
     /tmp/cc69O5m9.s:1025   .text:00000000000002fc .L0 
     /tmp/cc69O5m9.s:1041   .text:0000000000000300 .L0 
     /tmp/cc69O5m9.s:1051   .text:0000000000000300 .L0 
     /tmp/cc69O5m9.s:470    .text:0000000000000144 .L0 
     /tmp/cc69O5m9.s:530    .text:0000000000000178 .L0 
     /tmp/cc69O5m9.s:594    .text:00000000000001a8 .L0 
     /tmp/cc69O5m9.s:671    .text:00000000000001e8 .L0 
     /tmp/cc69O5m9.s:809    .text:0000000000000258 .L0 
     /tmp/cc69O5m9.s:126    .text:0000000000000088 .L18
     /tmp/cc69O5m9.s:163    .text:00000000000000b0 .L19
     /tmp/cc69O5m9.s:140    .text:0000000000000090 .L5
     /tmp/cc69O5m9.s:441    .text:0000000000000138 .L20
     /tmp/cc69O5m9.s:509    .text:000000000000016c .L21
     /tmp/cc69O5m9.s:569    .text:00000000000001a0 .L22
     /tmp/cc69O5m9.s:646    .text:00000000000001e0 .L23
     /tmp/cc69O5m9.s:727    .text:0000000000000228 .L24
     /tmp/cc69O5m9.s:802    .text:0000000000000258 .L25
     /tmp/cc69O5m9.s:855    .text:0000000000000284 .L26
     /tmp/cc69O5m9.s:915    .text:00000000000002b4 .L27
GAS LISTING /tmp/cc69O5m9.s 			page 35


     /tmp/cc69O5m9.s:976    .text:00000000000002dc .L28
     /tmp/cc69O5m9.s:941    .text:00000000000002c4 .L15
     /tmp/cc69O5m9.s:3057   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc69O5m9.s:4766   .debug_str:000000000000090d .LASF181
     /tmp/cc69O5m9.s:4508   .debug_str:000000000000014e .LASF182
     /tmp/cc69O5m9.s:4640   .debug_str:0000000000000531 .LASF183
     /tmp/cc69O5m9.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc69O5m9.s:1044   .text:0000000000000300 .Letext0
     /tmp/cc69O5m9.s:4460   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc69O5m9.s:4574   .debug_str:000000000000034f .LASF0
     /tmp/cc69O5m9.s:4604   .debug_str:000000000000043a .LASF1
     /tmp/cc69O5m9.s:4692   .debug_str:00000000000006f3 .LASF2
     /tmp/cc69O5m9.s:4700   .debug_str:000000000000072e .LASF4
     /tmp/cc69O5m9.s:4586   .debug_str:00000000000003a4 .LASF3
     /tmp/cc69O5m9.s:4470   .debug_str:0000000000000040 .LASF5
     /tmp/cc69O5m9.s:4664   .debug_str:000000000000062d .LASF6
     /tmp/cc69O5m9.s:4592   .debug_str:00000000000003e3 .LASF7
     /tmp/cc69O5m9.s:4552   .debug_str:00000000000002a8 .LASF8
     /tmp/cc69O5m9.s:4560   .debug_str:00000000000002ee .LASF9
     /tmp/cc69O5m9.s:4496   .debug_str:00000000000000e9 .LASF10
     /tmp/cc69O5m9.s:4542   .debug_str:000000000000026e .LASF11
     /tmp/cc69O5m9.s:4510   .debug_str:000000000000015c .LASF12
     /tmp/cc69O5m9.s:4494   .debug_str:00000000000000d9 .LASF13
     /tmp/cc69O5m9.s:4738   .debug_str:0000000000000852 .LASF14
     /tmp/cc69O5m9.s:4528   .debug_str:00000000000001ef .LASF15
     /tmp/cc69O5m9.s:4730   .debug_str:0000000000000829 .LASF16
     /tmp/cc69O5m9.s:4802   .debug_str:0000000000000ad6 .LASF68
     /tmp/cc69O5m9.s:4680   .debug_str:00000000000006ac .LASF20
     /tmp/cc69O5m9.s:4610   .debug_str:0000000000000466 .LASF17
     /tmp/cc69O5m9.s:4534   .debug_str:0000000000000239 .LASF18
     /tmp/cc69O5m9.s:4822   .debug_str:0000000000000b6b .LASF19
     /tmp/cc69O5m9.s:4796   .debug_str:0000000000000ab8 .LASF21
     /tmp/cc69O5m9.s:4540   .debug_str:0000000000000262 .LASF22
     /tmp/cc69O5m9.s:4764   .debug_str:0000000000000900 .LASF23
     /tmp/cc69O5m9.s:4516   .debug_str:000000000000018b .LASF24
     /tmp/cc69O5m9.s:4512   .debug_str:000000000000016c .LASF25
     /tmp/cc69O5m9.s:4518   .debug_str:0000000000000197 .LASF27
     /tmp/cc69O5m9.s:4626   .debug_str:00000000000004c7 .LASF26
     /tmp/cc69O5m9.s:4760   .debug_str:00000000000008da .LASF28
     /tmp/cc69O5m9.s:4564   .debug_str:000000000000030e .LASF29
     /tmp/cc69O5m9.s:4570   .debug_str:0000000000000331 .LASF30
     /tmp/cc69O5m9.s:4708   .debug_str:0000000000000770 .LASF31
     /tmp/cc69O5m9.s:4532   .debug_str:000000000000021e .LASF32
     /tmp/cc69O5m9.s:4578   .debug_str:0000000000000373 .LASF33
     /tmp/cc69O5m9.s:4814   .debug_str:0000000000000b28 .LASF34
     /tmp/cc69O5m9.s:4786   .debug_str:0000000000000a83 .LASF35
     /tmp/cc69O5m9.s:4776   .debug_str:0000000000000a1f .LASF37
     /tmp/cc69O5m9.s:4688   .debug_str:00000000000006df .LASF39
     /tmp/cc69O5m9.s:4648   .debug_str:0000000000000584 .LASF41
     /tmp/cc69O5m9.s:4674   .debug_str:000000000000067e .LASF36
     /tmp/cc69O5m9.s:4676   .debug_str:0000000000000685 .LASF38
     /tmp/cc69O5m9.s:4642   .debug_str:0000000000000561 .LASF40
     /tmp/cc69O5m9.s:4594   .debug_str:00000000000003f6 .LASF42
     /tmp/cc69O5m9.s:4818   .debug_str:0000000000000b4c .LASF43
     /tmp/cc69O5m9.s:4770   .debug_str:00000000000009dc .LASF44
     /tmp/cc69O5m9.s:4636   .debug_str:0000000000000524 .LASF45
     /tmp/cc69O5m9.s:4646   .debug_str:0000000000000570 .LASF46
GAS LISTING /tmp/cc69O5m9.s 			page 36


     /tmp/cc69O5m9.s:4614   .debug_str:0000000000000486 .LASF47
     /tmp/cc69O5m9.s:4678   .debug_str:0000000000000698 .LASF48
     /tmp/cc69O5m9.s:4844   .debug_str:0000000000000c3e .LASF49
     /tmp/cc69O5m9.s:4582   .debug_str:0000000000000386 .LASF50
     /tmp/cc69O5m9.s:4736   .debug_str:000000000000084b .LASF51
     /tmp/cc69O5m9.s:4704   .debug_str:0000000000000756 .LASF52
     /tmp/cc69O5m9.s:4706   .debug_str:0000000000000769 .LASF53
     /tmp/cc69O5m9.s:4502   .debug_str:0000000000000115 .LASF54
     /tmp/cc69O5m9.s:4526   .debug_str:00000000000001e9 .LASF55
     /tmp/cc69O5m9.s:4568   .debug_str:000000000000031f .LASF56
     /tmp/cc69O5m9.s:4580   .debug_str:0000000000000380 .LASF57
     /tmp/cc69O5m9.s:4562   .debug_str:00000000000002fc .LASF58
     /tmp/cc69O5m9.s:4472   .debug_str:0000000000000047 .LASF59
     /tmp/cc69O5m9.s:4696   .debug_str:000000000000070b .LASF60
     /tmp/cc69O5m9.s:4690   .debug_str:00000000000006e8 .LASF61
     /tmp/cc69O5m9.s:4838   .debug_str:0000000000000c00 .LASF62
     /tmp/cc69O5m9.s:4804   .debug_str:0000000000000adc .LASF63
     /tmp/cc69O5m9.s:4828   .debug_str:0000000000000b92 .LASF64
     /tmp/cc69O5m9.s:4800   .debug_str:0000000000000acc .LASF79
     /tmp/cc69O5m9.s:4630   .debug_str:00000000000004f2 .LASF81
     /tmp/cc69O5m9.s:4718   .debug_str:00000000000007a2 .LASF114
     /tmp/cc69O5m9.s:4602   .debug_str:0000000000000435 .LASF65
     /tmp/cc69O5m9.s:4498   .debug_str:00000000000000f8 .LASF66
     /tmp/cc69O5m9.s:4476   .debug_str:000000000000006b .LASF67
     /tmp/cc69O5m9.s:4658   .debug_str:00000000000005f4 .LASF69
     /tmp/cc69O5m9.s:4726   .debug_str:000000000000080c .LASF70
     /tmp/cc69O5m9.s:4714   .debug_str:0000000000000792 .LASF71
     /tmp/cc69O5m9.s:4474   .debug_str:0000000000000052 .LASF73
     /tmp/cc69O5m9.s:4846   .debug_str:0000000000000c46 .LASF72
     /tmp/cc69O5m9.s:4558   .debug_str:00000000000002ce .LASF74
     /tmp/cc69O5m9.s:4624   .debug_str:00000000000004bd .LASF75
     /tmp/cc69O5m9.s:4702   .debug_str:0000000000000735 .LASF76
     /tmp/cc69O5m9.s:4650   .debug_str:0000000000000599 .LASF77
     /tmp/cc69O5m9.s:4588   .debug_str:00000000000003b6 .LASF78
     /tmp/cc69O5m9.s:4584   .debug_str:000000000000039a .LASF80
     /tmp/cc69O5m9.s:4656   .debug_str:00000000000005c6 .LASF82
     /tmp/cc69O5m9.s:4620   .debug_str:00000000000004ad .LASF83
     /tmp/cc69O5m9.s:4550   .debug_str:000000000000029e .LASF84
     /tmp/cc69O5m9.s:4752   .debug_str:0000000000000896 .LASF85
     /tmp/cc69O5m9.s:4840   .debug_str:0000000000000c18 .LASF86
     /tmp/cc69O5m9.s:4486   .debug_str:000000000000009b .LASF87
     /tmp/cc69O5m9.s:4464   .debug_str:0000000000000005 .LASF88
     /tmp/cc69O5m9.s:4654   .debug_str:00000000000005b3 .LASF89
     /tmp/cc69O5m9.s:4490   .debug_str:00000000000000bb .LASF90
     /tmp/cc69O5m9.s:4478   .debug_str:0000000000000070 .LASF91
     /tmp/cc69O5m9.s:4728   .debug_str:0000000000000816 .LASF92
     /tmp/cc69O5m9.s:4748   .debug_str:0000000000000878 .LASF93
     /tmp/cc69O5m9.s:4834   .debug_str:0000000000000bd8 .LASF184
     /tmp/cc69O5m9.s:4774   .debug_str:0000000000000a07 .LASF185
     /tmp/cc69O5m9.s:4754   .debug_str:00000000000008aa .LASF94
     /tmp/cc69O5m9.s:4792   .debug_str:0000000000000aae .LASF186
     /tmp/cc69O5m9.s:4734   .debug_str:0000000000000846 .LASF95
     /tmp/cc69O5m9.s:4638   .debug_str:000000000000052c .LASF96
     /tmp/cc69O5m9.s:4606   .debug_str:000000000000044d .LASF97
     /tmp/cc69O5m9.s:4836   .debug_str:0000000000000bec .LASF98
     /tmp/cc69O5m9.s:4634   .debug_str:000000000000051f .LASF99
     /tmp/cc69O5m9.s:4548   .debug_str:000000000000028b .LASF100
GAS LISTING /tmp/cc69O5m9.s 			page 37


     /tmp/cc69O5m9.s:4820   .debug_str:0000000000000b54 .LASF106
     /tmp/cc69O5m9.s:4694   .debug_str:0000000000000701 .LASF187
     /tmp/cc69O5m9.s:4684   .debug_str:00000000000006c3 .LASF188
     /tmp/cc69O5m9.s:4598   .debug_str:0000000000000424 .LASF101
     /tmp/cc69O5m9.s:4662   .debug_str:0000000000000610 .LASF102
     /tmp/cc69O5m9.s:4616   .debug_str:000000000000048e .LASF103
     /tmp/cc69O5m9.s:4722   .debug_str:00000000000007c8 .LASF104
     /tmp/cc69O5m9.s:4660   .debug_str:0000000000000604 .LASF105
     /tmp/cc69O5m9.s:4506   .debug_str:0000000000000130 .LASF107
     /tmp/cc69O5m9.s:4848   .debug_str:0000000000000c4f .LASF108
     /tmp/cc69O5m9.s:4778   .debug_str:0000000000000a34 .LASF109
     /tmp/cc69O5m9.s:4716   .debug_str:0000000000000797 .LASF110
     /tmp/cc69O5m9.s:4830   .debug_str:0000000000000ba8 .LASF111
     /tmp/cc69O5m9.s:4670   .debug_str:000000000000066d .LASF112
     /tmp/cc69O5m9.s:4628   .debug_str:00000000000004d8 .LASF113
     /tmp/cc69O5m9.s:4504   .debug_str:0000000000000128 .LASF115
     /tmp/cc69O5m9.s:4740   .debug_str:000000000000085e .LASF116
     /tmp/cc69O5m9.s:4682   .debug_str:00000000000006b7 .LASF117
     /tmp/cc69O5m9.s:4536   .debug_str:0000000000000242 .LASF118
     /tmp/cc69O5m9.s:4712   .debug_str:0000000000000785 .LASF119
     /tmp/cc69O5m9.s:4750   .debug_str:000000000000088b .LASF120
     /tmp/cc69O5m9.s:4772   .debug_str:00000000000009f0 .LASF121
     /tmp/cc69O5m9.s:4816   .debug_str:0000000000000b42 .LASF122
     /tmp/cc69O5m9.s:4652   .debug_str:000000000000059e .LASF123
     /tmp/cc69O5m9.s:4484   .debug_str:000000000000008f .LASF124
     /tmp/cc69O5m9.s:4612   .debug_str:000000000000046f .LASF125
     /tmp/cc69O5m9.s:4622   .debug_str:00000000000004b2 .LASF126
     /tmp/cc69O5m9.s:4790   .debug_str:0000000000000a98 .LASF127
     /tmp/cc69O5m9.s:4768   .debug_str:00000000000009d1 .LASF128
     /tmp/cc69O5m9.s:4756   .debug_str:00000000000008b4 .LASF129
     /tmp/cc69O5m9.s:4788   .debug_str:0000000000000a8c .LASF130
     /tmp/cc69O5m9.s:4618   .debug_str:0000000000000496 .LASF131
     /tmp/cc69O5m9.s:4758   .debug_str:00000000000008ca .LASF132
     /tmp/cc69O5m9.s:4468   .debug_str:000000000000001d .LASF133
     /tmp/cc69O5m9.s:4686   .debug_str:00000000000006da .LASF189
     /tmp/cc69O5m9.s:4608   .debug_str:0000000000000460 .LASF134
     /tmp/cc69O5m9.s:4590   .debug_str:00000000000003d3 .LASF135
     /tmp/cc69O5m9.s:4520   .debug_str:00000000000001b5 .LASF136
     /tmp/cc69O5m9.s:4832   .debug_str:0000000000000bc5 .LASF137
     /tmp/cc69O5m9.s:4488   .debug_str:00000000000000ad .LASF138
     /tmp/cc69O5m9.s:4530   .debug_str:0000000000000205 .LASF139
     /tmp/cc69O5m9.s:4762   .debug_str:00000000000008f8 .LASF190
     /tmp/cc69O5m9.s:4538   .debug_str:000000000000024e .LASF162
     /tmp/cc69O5m9.s:4462   .debug_str:0000000000000000 .LASF140
     /tmp/cc69O5m9.s:4810   .debug_str:0000000000000b0a .LASF141
     /tmp/cc69O5m9.s:4744   .debug_str:000000000000086a .LASF142
     /tmp/cc69O5m9.s:4600   .debug_str:000000000000042d .LASF143
     /tmp/cc69O5m9.s:4746   .debug_str:000000000000086f .LASF144
     /tmp/cc69O5m9.s:4672   .debug_str:0000000000000676 .LASF145
     /tmp/cc69O5m9.s:4482   .debug_str:0000000000000087 .LASF146
     /tmp/cc69O5m9.s:4514   .debug_str:000000000000017d .LASF147
     /tmp/cc69O5m9.s:4724   .debug_str:00000000000007e4 .LASF148
     /tmp/cc69O5m9.s:4698   .debug_str:0000000000000723 .LASF191
     /tmp/cc69O5m9.s:4554   .debug_str:00000000000002b8 .LASF149
     /tmp/cc69O5m9.s:4492   .debug_str:00000000000000cb .LASF150
     /tmp/cc69O5m9.s:4576   .debug_str:000000000000035c .LASF151
     /tmp/cc69O5m9.s:4824   .debug_str:0000000000000b74 .LASF152
GAS LISTING /tmp/cc69O5m9.s 			page 38


     /tmp/cc69O5m9.s:4812   .debug_str:0000000000000b10 .LASF153
     /tmp/cc69O5m9.s:4632   .debug_str:0000000000000508 .LASF154
     /tmp/cc69O5m9.s:4500   .debug_str:00000000000000fd .LASF155
     /tmp/cc69O5m9.s:4522   .debug_str:00000000000001be .LASF156
     /tmp/cc69O5m9.s:4720   .debug_str:00000000000007ae .LASF157
     /tmp/cc69O5m9.s:4742   .debug_str:0000000000000863 .LASF158
     /tmp/cc69O5m9.s:4806   .debug_str:0000000000000ae6 .LASF159
     /tmp/cc69O5m9.s:4566   .debug_str:0000000000000319 .LASF160
     /tmp/cc69O5m9.s:4850   .debug_str:0000000000000c59 .LASF161
     /tmp/cc69O5m9.s:4842   .debug_str:0000000000000c25 .LASF192
     /tmp/cc69O5m9.s:4780   .debug_str:0000000000000a4f .LASF163
     /tmp/cc69O5m9.s:4666   .debug_str:0000000000000640 .LASF164
     /tmp/cc69O5m9.s:4524   .debug_str:00000000000001c3 .LASF165
     /tmp/cc69O5m9.s:4572   .debug_str:0000000000000349 .LASF166
     /tmp/cc69O5m9.s:4596   .debug_str:0000000000000409 .LASF167
     /tmp/cc69O5m9.s:4466   .debug_str:0000000000000015 .LASF168
     /tmp/cc69O5m9.s:4668   .debug_str:0000000000000650 .LASF169
     /tmp/cc69O5m9.s:4782   .debug_str:0000000000000a6c .LASF170
     /tmp/cc69O5m9.s:4546   .debug_str:0000000000000282 .LASF171
     /tmp/cc69O5m9.s:67     .text:000000000000002c .LFB55
     /tmp/cc69O5m9.s:1042   .text:0000000000000300 .LFE55
     /tmp/cc69O5m9.s:4732   .debug_str:000000000000083f .LASF172
     /tmp/cc69O5m9.s:4120   .debug_loc:0000000000000000 .LLST1
     /tmp/cc69O5m9.s:4436   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc69O5m9.s:4710   .debug_str:000000000000077e .LASF173
     /tmp/cc69O5m9.s:4135   .debug_loc:0000000000000049 .LLST2
     /tmp/cc69O5m9.s:454    .text:0000000000000138 .LBB198
     /tmp/cc69O5m9.s:512    .text:000000000000016c .LBE198
     /tmp/cc69O5m9.s:4784   .debug_str:0000000000000a79 .LASF174
     /tmp/cc69O5m9.s:4178   .debug_loc:0000000000000117 .LLST32
     /tmp/cc69O5m9.s:478    .text:0000000000000154 .LBB199
     /tmp/cc69O5m9.s:493    .text:0000000000000160 .LBE199
     /tmp/cc69O5m9.s:497    .text:0000000000000164 .LBB201
     /tmp/cc69O5m9.s:511    .text:000000000000016c .LBE201
     /tmp/cc69O5m9.s:4190   .debug_loc:000000000000014e .LLST33
     /tmp/cc69O5m9.s:467    .text:0000000000000144 .LVL18
     /tmp/cc69O5m9.s:514    .text:000000000000016c .LBB184
     /tmp/cc69O5m9.s:572    .text:00000000000001a0 .LBE184
     /tmp/cc69O5m9.s:4644   .debug_str:0000000000000568 .LASF175
     /tmp/cc69O5m9.s:4197   .debug_loc:0000000000000171 .LLST30
     /tmp/cc69O5m9.s:538    .text:0000000000000188 .LBB185
     /tmp/cc69O5m9.s:553    .text:0000000000000194 .LBE185
     /tmp/cc69O5m9.s:557    .text:0000000000000198 .LBB187
     /tmp/cc69O5m9.s:571    .text:00000000000001a0 .LBE187
     /tmp/cc69O5m9.s:4209   .debug_loc:00000000000001a8 .LLST31
     /tmp/cc69O5m9.s:527    .text:0000000000000178 .LVL22
     /tmp/cc69O5m9.s:574    .text:00000000000001a0 .LBB171
     /tmp/cc69O5m9.s:649    .text:00000000000001e0 .LBE171
     /tmp/cc69O5m9.s:4826   .debug_str:0000000000000b8b .LASF176
     /tmp/cc69O5m9.s:4216   .debug_loc:00000000000001cb .LLST26
     /tmp/cc69O5m9.s:4223   .debug_loc:00000000000001ee .LLST27
     /tmp/cc69O5m9.s:4230   .debug_loc:0000000000000211 .LLST28
     /tmp/cc69O5m9.s:615    .text:00000000000001c8 .LBB172
     /tmp/cc69O5m9.s:630    .text:00000000000001d4 .LBE172
     /tmp/cc69O5m9.s:634    .text:00000000000001d8 .LBB174
     /tmp/cc69O5m9.s:648    .text:00000000000001e0 .LBE174
     /tmp/cc69O5m9.s:4237   .debug_loc:0000000000000234 .LLST29
GAS LISTING /tmp/cc69O5m9.s 			page 39


     /tmp/cc69O5m9.s:611    .text:00000000000001c4 .LVL29
     /tmp/cc69O5m9.s:651    .text:00000000000001e0 .LBB159
     /tmp/cc69O5m9.s:730    .text:0000000000000228 .LBE159
     /tmp/cc69O5m9.s:4244   .debug_loc:0000000000000257 .LLST22
     /tmp/cc69O5m9.s:4251   .debug_loc:000000000000027a .LLST23
     /tmp/cc69O5m9.s:4258   .debug_loc:000000000000029d .LLST24
     /tmp/cc69O5m9.s:696    .text:0000000000000210 .LBB160
     /tmp/cc69O5m9.s:711    .text:000000000000021c .LBE160
     /tmp/cc69O5m9.s:715    .text:0000000000000220 .LBB162
     /tmp/cc69O5m9.s:729    .text:0000000000000228 .LBE162
     /tmp/cc69O5m9.s:4265   .debug_loc:00000000000002c0 .LLST25
     /tmp/cc69O5m9.s:688    .text:0000000000000204 .LVL36
     /tmp/cc69O5m9.s:694    .text:0000000000000210 .LVL37
     /tmp/cc69O5m9.s:732    .text:0000000000000228 .LBB144
     /tmp/cc69O5m9.s:805    .text:0000000000000258 .LBE144
     /tmp/cc69O5m9.s:4794   .debug_str:0000000000000ab3 .LASF177
     /tmp/cc69O5m9.s:4272   .debug_loc:00000000000002e3 .LLST18
     /tmp/cc69O5m9.s:4808   .debug_str:0000000000000b02 .LASF178
     /tmp/cc69O5m9.s:4279   .debug_loc:0000000000000306 .LLST19
     /tmp/cc69O5m9.s:734    .text:0000000000000228 .LBB145
     /tmp/cc69O5m9.s:750    .text:0000000000000234 .LBE145
     /tmp/cc69O5m9.s:755    .text:0000000000000238 .LBB147
     /tmp/cc69O5m9.s:771    .text:0000000000000244 .LBE147
     /tmp/cc69O5m9.s:777    .text:000000000000024c .LBB149
     /tmp/cc69O5m9.s:788    .text:0000000000000250 .LBE149
     /tmp/cc69O5m9.s:4286   .debug_loc:0000000000000329 .LLST20
     /tmp/cc69O5m9.s:790    .text:0000000000000250 .LBB151
     /tmp/cc69O5m9.s:804    .text:0000000000000258 .LBE151
     /tmp/cc69O5m9.s:4293   .debug_loc:000000000000034c .LLST21
     /tmp/cc69O5m9.s:775    .text:000000000000024c .LVL43
     /tmp/cc69O5m9.s:859    .text:0000000000000284 .LBB124
     /tmp/cc69O5m9.s:918    .text:00000000000002b4 .LBE124
     /tmp/cc69O5m9.s:4300   .debug_loc:000000000000036f .LLST12
     /tmp/cc69O5m9.s:4480   .debug_str:0000000000000082 .LASF179
     /tmp/cc69O5m9.s:4307   .debug_loc:0000000000000392 .LLST13
     /tmp/cc69O5m9.s:884    .text:000000000000029c .LBB125
     /tmp/cc69O5m9.s:899    .text:00000000000002a8 .LBE125
     /tmp/cc69O5m9.s:903    .text:00000000000002ac .LBB127
     /tmp/cc69O5m9.s:917    .text:00000000000002b4 .LBE127
     /tmp/cc69O5m9.s:4314   .debug_loc:00000000000003b5 .LLST14
     /tmp/cc69O5m9.s:880    .text:0000000000000298 .LVL53
     /tmp/cc69O5m9.s:920    .text:00000000000002b4 .LBB114
     /tmp/cc69O5m9.s:979    .text:00000000000002dc .LBE114
     /tmp/cc69O5m9.s:4321   .debug_loc:00000000000003d8 .LLST9
     /tmp/cc69O5m9.s:934    .text:00000000000002bc .LBB115
     /tmp/cc69O5m9.s:943    .text:00000000000002c4 .LBE115
     /tmp/cc69O5m9.s:4328   .debug_loc:00000000000003fb .LLST10
     /tmp/cc69O5m9.s:940    .text:00000000000002c4 .LVL58
     /tmp/cc69O5m9.s:945    .text:00000000000002c4 .LBB117
     /tmp/cc69O5m9.s:960    .text:00000000000002d0 .LBE117
     /tmp/cc69O5m9.s:964    .text:00000000000002d4 .LBB119
     /tmp/cc69O5m9.s:978    .text:00000000000002dc .LBE119
     /tmp/cc69O5m9.s:4335   .debug_loc:000000000000041e .LLST11
     /tmp/cc69O5m9.s:981    .text:00000000000002dc .LBB108
     /tmp/cc69O5m9.s:1028   .text:0000000000000300 .LBE108
     /tmp/cc69O5m9.s:4342   .debug_loc:0000000000000441 .LLST8
     /tmp/cc69O5m9.s:996    .text:00000000000002e8 .LBB109
GAS LISTING /tmp/cc69O5m9.s 			page 40


     /tmp/cc69O5m9.s:1011   .text:00000000000002f4 .LBE109
     /tmp/cc69O5m9.s:1015   .text:00000000000002f8 .LBB111
     /tmp/cc69O5m9.s:1027   .text:0000000000000300 .LBE111
     /tmp/cc69O5m9.s:994    .text:00000000000002e8 .LVL62
     /tmp/cc69O5m9.s:362    .text:0000000000000104 .LBB99
     /tmp/cc69O5m9.s:444    .text:0000000000000138 .LBE99
     /tmp/cc69O5m9.s:4349   .debug_loc:0000000000000464 .LLST3
     /tmp/cc69O5m9.s:4356   .debug_loc:0000000000000487 .LLST4
     /tmp/cc69O5m9.s:4363   .debug_loc:00000000000004aa .LLST5
     /tmp/cc69O5m9.s:364    .text:0000000000000104 .LBB100
     /tmp/cc69O5m9.s:380    .text:0000000000000110 .LBE100
     /tmp/cc69O5m9.s:385    .text:0000000000000114 .LBB102
     /tmp/cc69O5m9.s:401    .text:0000000000000120 .LBE102
     /tmp/cc69O5m9.s:416    .text:000000000000012c .LBB104
     /tmp/cc69O5m9.s:427    .text:0000000000000130 .LBE104
     /tmp/cc69O5m9.s:4370   .debug_loc:00000000000004cd .LLST6
     /tmp/cc69O5m9.s:429    .text:0000000000000130 .LBB106
     /tmp/cc69O5m9.s:443    .text:0000000000000138 .LBE106
     /tmp/cc69O5m9.s:4377   .debug_loc:00000000000004f0 .LLST7
     /tmp/cc69O5m9.s:414    .text:000000000000012c .LVL14
     /tmp/cc69O5m9.s:813    .text:0000000000000264 .LBB133
     /tmp/cc69O5m9.s:822    .text:000000000000026c .LBE133
     /tmp/cc69O5m9.s:4384   .debug_loc:0000000000000513 .LLST15
     /tmp/cc69O5m9.s:4392   .debug_loc:0000000000000537 .LLST16
     /tmp/cc69O5m9.s:824    .text:000000000000026c .LBB135
     /tmp/cc69O5m9.s:839    .text:0000000000000278 .LBE135
     /tmp/cc69O5m9.s:843    .text:000000000000027c .LBB137
     /tmp/cc69O5m9.s:857    .text:0000000000000284 .LBE137
     /tmp/cc69O5m9.s:4399   .debug_loc:000000000000055a .LLST17
     /tmp/cc69O5m9.s:83     .text:0000000000000044 .LBB84
     /tmp/cc69O5m9.s:99     .text:0000000000000050 .LBE84
     /tmp/cc69O5m9.s:129    .text:0000000000000088 .LBB222
     /tmp/cc69O5m9.s:142    .text:0000000000000090 .LBE222
     /tmp/cc69O5m9.s:4406   .debug_loc:000000000000057d .LLST34
     /tmp/cc69O5m9.s:123    .text:0000000000000084 .LVL3
     /tmp/cc69O5m9.s:147    .text:0000000000000098 .LVL6
     /tmp/cc69O5m9.s:10     .text:0000000000000000 .LFB54
     /tmp/cc69O5m9.s:61     .text:000000000000002c .LFE54
     /tmp/cc69O5m9.s:22     .text:000000000000000c .LBB82
     /tmp/cc69O5m9.s:35     .text:0000000000000014 .LBE82
     /tmp/cc69O5m9.s:4414   .debug_loc:00000000000005a1 .LLST0
     /tmp/cc69O5m9.s:4544   .debug_str:000000000000027d .LASF193
     /tmp/cc69O5m9.s:4798   .debug_str:0000000000000ac7 .LASF180
     /tmp/cc69O5m9.s:4556   .debug_str:00000000000002be .LASF194
     /tmp/cc69O5m9.s:97     .text:0000000000000050 .LVL2
     /tmp/cc69O5m9.s:125    .text:0000000000000088 .LVL4
     /tmp/cc69O5m9.s:138    .text:0000000000000090 .LVL5
     /tmp/cc69O5m9.s:162    .text:00000000000000b0 .LVL7
     /tmp/cc69O5m9.s:180    .text:00000000000000b8 .LVL9
     /tmp/cc69O5m9.s:175    .text:00000000000000b4 .LVL8
     /tmp/cc69O5m9.s:373    .text:0000000000000108 .LVL10
     /tmp/cc69O5m9.s:440    .text:0000000000000138 .LVL16
     /tmp/cc69O5m9.s:508    .text:000000000000016c .LVL20
     /tmp/cc69O5m9.s:568    .text:00000000000001a0 .LVL24
     /tmp/cc69O5m9.s:595    .text:00000000000001b0 .LVL27
     /tmp/cc69O5m9.s:645    .text:00000000000001e0 .LVL31
     /tmp/cc69O5m9.s:672    .text:00000000000001f0 .LVL34
GAS LISTING /tmp/cc69O5m9.s 			page 41


     /tmp/cc69O5m9.s:726    .text:0000000000000228 .LVL39
     /tmp/cc69O5m9.s:743    .text:000000000000022c .LVL40
     /tmp/cc69O5m9.s:801    .text:0000000000000258 .LVL45
     /tmp/cc69O5m9.s:810    .text:0000000000000260 .LVL46
     /tmp/cc69O5m9.s:854    .text:0000000000000284 .LVL50
     /tmp/cc69O5m9.s:914    .text:00000000000002b4 .LVL55
     /tmp/cc69O5m9.s:975    .text:00000000000002dc .LVL60
     /tmp/cc69O5m9.s:462    .text:000000000000013c .LVL17
     /tmp/cc69O5m9.s:496    .text:0000000000000164 .LVL19
     /tmp/cc69O5m9.s:522    .text:0000000000000170 .LVL21
     /tmp/cc69O5m9.s:556    .text:0000000000000198 .LVL23
     /tmp/cc69O5m9.s:584    .text:00000000000001a4 .LVL25
     /tmp/cc69O5m9.s:590    .text:00000000000001a8 .LVL26
     /tmp/cc69O5m9.s:606    .text:00000000000001bc .LVL28
     /tmp/cc69O5m9.s:633    .text:00000000000001d8 .LVL30
     /tmp/cc69O5m9.s:661    .text:00000000000001e4 .LVL32
     /tmp/cc69O5m9.s:667    .text:00000000000001e8 .LVL33
     /tmp/cc69O5m9.s:683    .text:00000000000001fc .LVL35
     /tmp/cc69O5m9.s:714    .text:0000000000000220 .LVL38
     /tmp/cc69O5m9.s:753    .text:0000000000000238 .LVL41
     /tmp/cc69O5m9.s:769    .text:0000000000000244 .LVL42
     /tmp/cc69O5m9.s:785    .text:0000000000000250 .LVL44
     /tmp/cc69O5m9.s:868    .text:0000000000000288 .LVL51
     /tmp/cc69O5m9.s:874    .text:000000000000028c .LVL52
     /tmp/cc69O5m9.s:902    .text:00000000000002ac .LVL54
     /tmp/cc69O5m9.s:928    .text:00000000000002b8 .LVL56
     /tmp/cc69O5m9.s:933    .text:00000000000002bc .LVL57
     /tmp/cc69O5m9.s:963    .text:00000000000002d4 .LVL59
     /tmp/cc69O5m9.s:989    .text:00000000000002e0 .LVL61
     /tmp/cc69O5m9.s:383    .text:0000000000000114 .LVL11
     /tmp/cc69O5m9.s:399    .text:0000000000000120 .LVL12
     /tmp/cc69O5m9.s:409    .text:0000000000000124 .LVL13
     /tmp/cc69O5m9.s:424    .text:0000000000000130 .LVL15
     /tmp/cc69O5m9.s:812    .text:0000000000000264 .LVL47
     /tmp/cc69O5m9.s:820    .text:000000000000026c .LVL48
     /tmp/cc69O5m9.s:842    .text:000000000000027c .LVL49
     /tmp/cc69O5m9.s:21     .text:000000000000000c .LVL0
     /tmp/cc69O5m9.s:32     .text:0000000000000014 .LVL1
     /tmp/cc69O5m9.s:1052   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc69O5m9.s:167    .text:00000000000000b0 .LBB88
     /tmp/cc69O5m9.s:183    .text:00000000000000bc .LBE88
     /tmp/cc69O5m9.s:189    .text:00000000000000bc .LBB213
     /tmp/cc69O5m9.s:196    .text:00000000000000c4 .LBE213
     /tmp/cc69O5m9.s:202    .text:00000000000000c4 .LBB214
     /tmp/cc69O5m9.s:211    .text:00000000000000cc .LBE214
     /tmp/cc69O5m9.s:217    .text:00000000000000cc .LBB215
     /tmp/cc69O5m9.s:228    .text:00000000000000d4 .LBE215
     /tmp/cc69O5m9.s:234    .text:00000000000000d4 .LBB216
     /tmp/cc69O5m9.s:247    .text:00000000000000dc .LBE216
     /tmp/cc69O5m9.s:253    .text:00000000000000dc .LBB217
     /tmp/cc69O5m9.s:268    .text:00000000000000e4 .LBE217
     /tmp/cc69O5m9.s:274    .text:00000000000000e4 .LBB218
     /tmp/cc69O5m9.s:291    .text:00000000000000ec .LBE218
     /tmp/cc69O5m9.s:297    .text:00000000000000ec .LBB219
     /tmp/cc69O5m9.s:316    .text:00000000000000f4 .LBE219
     /tmp/cc69O5m9.s:322    .text:00000000000000f4 .LBB220
     /tmp/cc69O5m9.s:343    .text:00000000000000fc .LBE220
GAS LISTING /tmp/cc69O5m9.s 			page 42


     /tmp/cc69O5m9.s:349    .text:00000000000000fc .LBB221
     /tmp/cc69O5m9.s:1038   .text:0000000000000300 .LBE221

UNDEFINED SYMBOLS
console_handler
_ZN13Semaphore_sys4waitEv
_ZN15MemoryAllocator8allocateEm
backupSP
_ZN15MemoryAllocator4freeEPv
_ZN3CCB15createCoroutineEPFvPvES0_
_ZN9Scheduler3putEP3CCB
_ZN3CCB8dispatchEv
_ZN3CCB7runningE
_ZN13Semaphore_sys15createSemaphoreEj
_ZN13Semaphore_sys6signalEv
